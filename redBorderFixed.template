{
	"AWSTemplateFormatVersion" : "2010-09-09",

	"Description" : "AWS CloudFormation template to deploy redBorder Horama Manager",

	"Parameters" : {
		"AMI" : {
			"Description" : "redBorder AMI ID to deploy", 
			"Type" : "String"
		},
		"ClusterSize" : {
			"Description" : "",
			"Type" : "String",
			"AllowedValues" : [ "1", "2", "10" ],
			"Default" : "1"
		},
		"InstanceSize" : {
			"Description" : "performance of each node (instance types). Instance types will be choosen automatically in function of this parameter",
			"Type" : "String",
			"AllowedValues" : [ "small", "medium", "large" ],
			"Default" : "small"
		}, 
		"KeyName" : {
			"Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
			"Type" : "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription" : "must be the name of an existing AWS EC2 KeyPair"
		},
		"CDOMAIN" : {
			"Description" : "DNS Domain for cluster",
			"Type" : "String"			
		},
		"WebSSLCertificateName" : {
			"Description" : "SSL Certificate for web load balancer",
			"Type" : "String"
		},
		"DataSSLCertificateName" : {
			"Description" : "SSL Certificate for data load balancer",
			"Type" : "String"
		},
		"PreviousS3Bucket" : {
			"Description" : "S3 Bucket from a previous installation, for restore. Keep empty to avoid restore and create new bucket",
			"Type" : "String"
		}
	},

	"Mappings" : {
		"InstanceTypeMap" : {
			"master" :        { "small":"m4.xlarge",      "medium":"m4.2xlarge",      "large":"m4.4xlarge"       },
			"custom" :        { "small":"m4.large",       "medium":"m4.2xlarge",      "large":"m4.4xlarge"       },
			"corezk" :        { "small":"m4.large",      "medium":"i2.xlarge",       "large":"i2.2xlarge"       },
			"kafka" :         { "small":"m4.large",      "medium":"i2.xlarge",       "large":"i2.2xlarge"       },
			"http2k" :        { "small":"c4.large",       "medium":"c4.large",        "large":"c4.2xlarge"       },
			"web" :           { "small":"c4.large",       "medium":"c4.xlarge",       "large":"c4.4xlarge"       },
			"broker" :        { "small":"r3.large",       "medium":"r3.xlarge",       "large":"r3.4xlarge"       },
			"middlemanager" : { "small":"r3.large",       "medium":"r3.2xlarge",      "large":"r3.8xlarge"       },
			"historical" :    { "small":"c4.large",       "medium":"c4.2xlarge",      "large":"c4.8xlarge"       },
			"samza" :         { "small":"c4.xlarge",      "medium":"c4.4xlarge",      "large":"c4.8xlarge"       }
		}
	},

	"Conditions" : {
		"masterRoleCreation" : {
			"Fn::Not" : [ { "Fn::Equals" : [ "10", { "Ref" : "ClusterSize" } ] } ]
		},
		"customRoleCreation" : {
			"Fn::Equals" : [ "2",  { "Ref" : "ClusterSize" } ]
		},
		"othersRoleCreations" : {
			"Fn::Equals" : [ "10",  { "Ref" : "ClusterSize" } ]
		},
		"regionNVirginia" : {
			"Fn::Equals" : [ "us-east-1", { "Ref" : "AWS::Region" } ]
		},
		"S3Creation" : {
			"Fn::Equals" : [ "", { "Ref" : "PreviousS3Bucket" } ]
		},
		"Restore" : {
			"Fn::Not" : [ { "Fn::Equals" : [ "", { "Ref" : "PreviousS3Bucket" } ] } ]
		}
	},
	
	"Resources" : {
		"VPC" : {
			"Type" : "AWS::EC2::VPC",
			"Properties" : {
				"CidrBlock" : "172.16.0.0/16",
				"EnableDnsSupport" : "true",
				"EnableDnsHostnames" : "true",
				"InstanceTenancy" : "default",
				"Tags" : [ { "Key" : "Name", "Value" : { "Fn::Join" : [ " - ", [ { "Ref" : "AWS::StackName" }, "VPC" ] ] } } ]
			}
		},
		"PublicSubnet" : {
			"Type" : "AWS::EC2::Subnet",
			"Properties" : {
				"VpcId" : { "Ref" : "VPC" },
				"CidrBlock" : "172.16.1.0/24",
				"AvailabilityZone" : { "Fn::Select" : [ 0, { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
				"Tags" : [ { "Key" : "Name", "Value" : { "Fn::Join" : [ " - ", [ { "Ref" : "AWS::StackName" }, "PublicSubnet" ] ] } } ]
			}
		},
		"PrivateSubnet" : {
			"Type" : "AWS::EC2::Subnet",
			"Properties" : {
				"VpcId" : { "Ref" : "VPC" },
				"CidrBlock" : "172.16.2.0/24",
				"AvailabilityZone" : { "Fn::GetAtt" : [ "PublicSubnet", "AvailabilityZone" ] },
				"Tags" : [ { "Key" : "Name", "Value" : { "Fn::Join" : [ " - ", [ { "Ref" : "AWS::StackName" }, "PrivateSubnet" ] ] } } ]
			}
		},
		"InternetGateway" : {
			"Type" : "AWS::EC2::InternetGateway",
			"Properties" : {
				"Tags" : [ { "Key" : "Name", "Value" : { "Fn::Join" : [ " - ", [ { "Ref" : "AWS::StackName" }, "InternetGateway" ] ] } } ]
			}
		},
		"AttachGateway" : {
			"Type" : "AWS::EC2::VPCGatewayAttachment",
			"Properties" : {
				"VpcId" : { "Ref" : "VPC" },
				"InternetGatewayId" : { "Ref" : "InternetGateway" }
			}
		},
		"RouteTable" : {
			"Type" : "AWS::EC2::RouteTable",
			"Properties" : {
				"VpcId" : { "Ref" : "VPC" },
				"Tags" : [ { "Key" : "Name", "Value" : { "Fn::Join" : [ " - ", [ { "Ref" : "AWS::StackName" }, "RouteTable" ] ] } } ]
			}
		},
		"Route" : {
			"Type" : "AWS::EC2::Route",
			"DependsOn" : "AttachGateway",
			"Properties" : {
				"RouteTableId" : { "Ref" : "RouteTable" },
				"DestinationCidrBlock" : "0.0.0.0/0",
				"GatewayId" : { "Ref" : "InternetGateway" }
			}
		},
		"PublicSubnetRouteTableAssociation" : {
			"Type" : "AWS::EC2::SubnetRouteTableAssociation",
			"Properties" : {
				"SubnetId" : { "Ref" : "PublicSubnet" },
				"RouteTableId" : { "Ref" : "RouteTable" }
			}
		},
		"IAMRole" : {
			"Type" : "AWS::IAM::Role",
			"Properties" : {
				"AssumeRolePolicyDocument" : {
					"Version" : "2012-10-17", 
					"Statement" : [ {
						"Effect" : "Allow", 
						"Principal" : {
							"Service" : [ "ec2.amazonaws.com" ]
						},
						"Action" : [ "sts:AssumeRole" ]
					} ]
				},
				"Path" : "/"
			}
		},
		"IAMInstanceProfile" : {
			"Type" : "AWS::IAM::InstanceProfile",
			"Properties" : {
				"Path" : "/",
				"Roles" : [ { "Ref" : "IAMRole" } ]
			}
		},
		"IAMUser" : {
			"Type" : "AWS::IAM::User",
			"Properties" : { }
		},
		"IAMAccessKey" : {
			"Type" : "AWS::IAM::AccessKey",
			"Properties" : {
				"Status" : "Active",
				"UserName" : { "Ref" : "IAMUser" }
			}
		},
		"IAMPolicy" : {
			"Type" : "AWS::IAM::ManagedPolicy",
			"Properties" : {
				"PolicyDocument" : {
					"Version" : "2012-10-17",
					"Statement": [ {
						"Action" : [ 
							"ec2:CreateNetworkInterface", 
							"ec2:AttachNetworkInterface",
							"ec2:ModifyNetworkInterfaceAttribute",
							"ec2:DescribeInstances",
							"ec2:AssignPrivateIpAddresses",
							"ec2:UnassignPrivateIpAddresses",
							"ec2:DescribeTags" ],
						"Effect" : "Allow",
						"Resource" : "*"
					}, {
						"Action" : "s3:*",
						"Effect" : "Allow", 
						"Resource" : [ { "Fn::Join" :
							[ "", [ "arn:aws:s3:::",
								{ "Fn::If" : [ "S3Creation", { "Ref" : "S3Bucket" }, { "Ref" : "PreviousS3Bucket" } ] } ] ] },
							{ "Fn::Join" : 
							[ "", [ "arn:aws:s3:::",
								{ "Fn::If" : [ "S3Creation", { "Ref" : "S3Bucket" }, { "Ref" : "PreviousS3Bucket" } ] }, "/*" ] ] } ]
					}, {
						"Effect": "Allow",
						"Action": [ "cloudformation:DescribeStackResource" ],
						"Resource": { "Fn::Join" : [ "", [ "arn:aws:cloudformation:", { "Ref" : "AWS::Region" }, ":", 
									{ "Ref" : "AWS::AccountId" }, ":stack/", { "Ref" : "AWS::StackName" }, "/*"   ] ] }
					},{
						"Effect": "Allow",
						"Action" : [ "cloudwatch:PutMetricData", "cloudwatch:DescribeAlarms" ],
						"Resource" : "*"
					},{
						"Effect": "Allow",
						"Action" : [ "route53:ChangeResourceRecordSets", "route53:ListHostedZones", "route53:ListResourceRecordSets" ],
						"Resource" : [ { "Fn::Join" : [ "", [ "arn:aws:route53:::hostedzone/", { "Ref" : "PublicHostedZone" } ] ] }, 
									   { "Fn::Join" : [ "", [ "arn:aws:route53:::hostedzone/", { "Ref" : "PrivateHostedZone" } ] ] } ]
					},{
						"Effect": "Allow",
						"Action" : [ "route53:ListHostedZones", "route53:ChangeResourceRecordSets", "route53:GetHostedZone" ],
						"Resource" : "*"
					},{
						"Effect": "Allow",
						"Action" : [ "logs:*" ],
						"Resource" : "*"
					} ]
				},
				"Roles" :  [ { "Ref" : "IAMRole" } ],
				"Users" : [ { "Ref" : "IAMUser" } ]
			}
		},
		"IAMUserChef" : {
			"Type" : "AWS::IAM::User",
			"Properties" : { }
		},
		"IAMAccessKeyChef" : {
			"Type" : "AWS::IAM::AccessKey",
			"Properties" : {
				"Status" : "Active",
				"UserName" : { "Ref" : "IAMUserChef" }
			}
		},
		"IAMPolicyChef" : {
			"Type" : "AWS::IAM::Policy", 
			"Properties" : {
				"PolicyName" : "RB-CF-POLICY", 
				"PolicyDocument" : {
					"Version" : "2012-10-17",
					"Statement": [ {
						"Action" : "s3:*",
						"Effect" : "Allow", 
						"Resource" : [ { "Fn::Join" :
							[ "", [ "arn:aws:s3:::",
								{ "Fn::If" : [ "S3Creation", { "Ref" : "S3Bucket" }, { "Ref" : "PreviousS3Bucket" } ] },
							"/organization-00000000000000000000000000000000/*" ] ] } ]
					} ]
				},
				"Users" : [ { "Ref" : "IAMUserChef" } ]
			}
		},

		"S3Bucket" : {
			"Type" : "AWS::S3::Bucket",
			"Condition" : "S3Creation",
			"Properties" : {
				"AccessControl" : "Private"
			},
			"DeletionPolicy" : "Retain"
		},
		"S3BucketPolicy" : {
			"Type" : "AWS::S3::BucketPolicy",
			"Condition" : "S3Creation",
			"Properties" : {
				"Bucket" : { "Ref" : "S3Bucket" },
				"PolicyDocument" : {
					"Statement" : [ { 
						"Effect" : "Allow",
						"Principal" : "*",
						"Action" : [ "s3:GetObject" ],
						"Resource" : { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3Bucket" },
							 "/Public/*" ] ] }
					} ]
				} 
			},
			"DeletionPolicy" : "Retain"
		},

		"redBorderPublicSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Security group for redBorder bond0 interfaces (public interfaces)",
				"VpcId" : { "Ref" : "VPC" },
				"SecurityGroupIngress" : [ {
					"IpProtocol" : "tcp",
					"FromPort" : "6666",
					"ToPort" : "6666",
					"CidrIp" :  "0.0.0.0/0"
				}, {
					"IpProtocol" : "tcp",
					"FromPort" : "80",
					"ToPort" : "80",
					"CidrIp" : "172.16.1.0/24"
				}, {
					"IpProtocol" : "tcp",
					"FromPort" : "7979",
					"ToPort" : "7979",
					"CidrIp" : "172.16.1.0/24"
				}, {
					"IpProtocol" : "tcp",
					"FromPort" : "7980",
					"ToPort" : "7980",
					"CidrIp" : "172.16.1.0/24"
				},  {
					"IpProtocol" : "tcp",
					"FromPort" : "9092",
					"ToPort" : "9092",
					"CidrIp" : "172.16.1.0/24"
				} ],
				"Tags" : [ {
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				}, {
					"Key" : "Name", 
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - rBPublicSG" ] ] }
				} ]
			}
		},
		
		"redBorderPrivateSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Security group for redBorder bond1 interfaces (private interfaces)",
				"VpcId" : { "Ref" : "VPC" },
				"Tags" : [ {
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				}, {
					"Key" : "Name", 
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - rBPrivateSG" ] ] }
				} ]
			}
		},
		"redBorderPrivateSecurityGroupIngress" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"GroupId" : { "Ref" : "redBorderPrivateSecurityGroup" },
				"IpProtocol" : "-1",
				"FromPort" : "-1", 
				"ToPort" : "-1",
				"SourceSecurityGroupId" : { "Ref" : "redBorderPrivateSecurityGroup" }
			}
		},
		"WebLoadBalancerSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Enable SSH, HTTP and HTTPS",
				"VpcId" : { "Ref" : "VPC" },
				"SecurityGroupIngress" : [ {
					"IpProtocol" : "tcp",
					"FromPort" : "443",
					"ToPort" : "443",
					"CidrIp" : "0.0.0.0/0"
				}, {
					"IpProtocol" : "tcp",
					"FromPort" : "80", 
					"ToPort" : "80",
					"CidrIp" : "0.0.0.0/0"
				}, {
					"IpProtocol" : "icmp",
					"FromPort" : "-1",
					"ToPort" : "-1",
					"CidrIp" : "0.0.0.0/0"
				} ],
				"Tags" : [ {
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				} ]
			}
		},
		"CoreLoadBalancerSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Enable erchef, postgresql, pgpool, resourcemanager and namenode traffic",
				"VpcId" : { "Ref" : "VPC" },
				"SecurityGroupIngress" : [ {
					"IpProtocol" : "tcp",
					"FromPort" : "443",
					"ToPort" : "443",
					"CidrIp" : "172.16.2.0/24"
				} ],
				"Tags" : [ {
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				} ]
			}
		},
		"KafkaLoadBalancerSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Enable Kafka TCP traffic",
				"VpcId" : { "Ref" : "VPC" },
				"SecurityGroupIngress" : [ {
					"IpProtocol" : "tcp",
					"FromPort" : "9092",
					"ToPort" : "9092",
					"CidrIp" : "172.16.2.0/24"
				} ],
				"Tags" : [ {
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				} ]
			}
		},
				
		"PublicHostedZone" : { 
			"Type" : "AWS::Route53::HostedZone",
			"Properties" : {
				"HostedZoneConfig" : {
					"Comment" : { "Fn::Join" : [ "", [ "Public Hosted Zone for stack ", { "Ref" : "AWS::StackName" } ] ] }
				},
				"Name" : { "Fn::Join" : [ "", [ { "Ref" : "CDOMAIN" }, "." ] ] }
			}
		},
		"PrivateHostedZone" : {
			"Type" : "AWS::Route53::HostedZone",
			"Properties" : {
				"HostedZoneConfig" : {
					"Comment" : { "Fn::Join" : [ "", [ "Private Hosted Zone for stack ", { "Ref" : "AWS::StackName" } ] ] }
				},
				"Name" : { "Fn::Join" : [ "", [ { "Ref" : "CDOMAIN" }, "." ] ] },
				"VPCs" : [ {
					"VPCId" : { "Ref" : "VPC" }, 
					"VPCRegion" : { "Ref" : "AWS::Region" }
				} ]
			}
		},		
		"PublicWebLoadBalancerDNSName" : {
			"Type" : "AWS::Route53::RecordSet",
			"Properties" : {
				"HostedZoneId" : { "Ref" : "PublicHostedZone" },
				"Name" : { "Ref" : "CDOMAIN" },
				"AliasTarget" : {
					"HostedZoneId" : { "Fn::GetAtt" : [ "WebElasticLoadBalancer", "CanonicalHostedZoneNameID" ] }, 
					"DNSName" : { "Fn::GetAtt" : [ "WebElasticLoadBalancer", "DNSName" ] }
				},
				"Type" : "A"
			}
		},
		"PrivateWebLoadBalancerDNSName" : {
			"Type" : "AWS::Route53::RecordSet",
			"Properties" : {
				"HostedZoneId" : { "Ref" : "PrivateHostedZone" },
				"Name" : { "Ref" : "CDOMAIN" },
				"AliasTarget" : {
					"HostedZoneId" : { "Fn::GetAtt" : [ "WebElasticLoadBalancer", "CanonicalHostedZoneNameID" ] }, 
					"DNSName" : { "Fn::GetAtt" : [ "WebElasticLoadBalancer", "DNSName" ] }
				},
				"Type" : "A"
			}
		},
		"DataLoadBalancerDNSName" : {
			"Type" : "AWS::Route53::RecordSet",
			"Properties" : {
				"HostedZoneId" : { "Ref" : "PublicHostedZone" },
				"Name" : { "Fn::Join" : [ "", [ "data.", { "Ref" : "CDOMAIN" } ] ] }, 
				"AliasTarget" : {
					"HostedZoneId" : { "Fn::If" : [ "othersRoleCreations",
						{ "Fn::GetAtt" : [ "DataElasticLoadBalancer", "CanonicalHostedZoneNameID" ] },
						{ "Fn::GetAtt" : [ "WebElasticLoadBalancer", "CanonicalHostedZoneNameID" ] }
					] }, 
					"DNSName" : { "Fn::If" : [ "othersRoleCreations",
						{ "Fn::GetAtt" : [ "DataElasticLoadBalancer", "DNSName" ] },
						{ "Fn::GetAtt" : [ "WebElasticLoadBalancer", "DNSName" ] }
					] } 
				},
				"Type" : "A"
			}
		},
		"ErchefName" : {
			"Type" : "AWS::Route53::RecordSet",			
			"Properties" : {
				"HostedZoneId" : { "Ref" : "PrivateHostedZone" },
				"Name" : { "Fn::Join" : [ "", [ "erchef.", { "Ref" : "CDOMAIN" } ] ] },
				"AliasTarget" : {
					"HostedZoneId" : { "Fn::GetAtt" : [ "CoreElasticLoadBalancer", "CanonicalHostedZoneNameID" ] }, 
					"DNSName" : { "Fn::GetAtt" : [ "CoreElasticLoadBalancer", "DNSName" ] }
				},
				"Type" : "A"
			}
		},
		"KafkaName" : {
			"Type" : "AWS::Route53::RecordSet",			
			"Properties" : {
				"HostedZoneId" : { "Ref" : "PrivateHostedZone" },
				"Name" : { "Fn::Join" : [ "", [ "kafka.", { "Ref" : "CDOMAIN" } ] ] },
				"AliasTarget" : {
					"HostedZoneId" : { "Fn::GetAtt" : [ "KafkaElasticLoadBalancer", "CanonicalHostedZoneNameID" ] }, 
					"DNSName" : { "Fn::GetAtt" : [ "KafkaElasticLoadBalancer", "DNSName" ] }
				},
				"Type" : "A"
			}
		},

		"WebElasticLoadBalancer" : {
			"Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties" : {
				"Instances" : [ { "Ref" : "WebInstance" } ],
				"CrossZone" : "true",
				"SecurityGroups" : [ { "Ref" : "WebLoadBalancerSecurityGroup" } ], 
				"Subnets" : [ { "Ref" : "PublicSubnet" } ],
				"ConnectionDrainingPolicy" : {
					"Enabled" : "true",
					"Timeout" : "30"
				},
				"Listeners" : [ {
					"LoadBalancerPort" : "443",
					"InstancePort" : "7979",
					"Protocol" : "HTTPS",
					"InstanceProtocol" : "HTTP",
					"SSLCertificateId" : { "Fn::Join" : [ "", [ "arn:aws:iam::", { "Ref" : "AWS::AccountId" }, 
						":server-certificate/", { "Ref" : "WebSSLCertificateName" } ] ] }
				}, {
					"LoadBalancerPort" : "80",
					"InstancePort" : "80", 
					"Protocol" : "HTTP", 
					"InstanceProtocol" : "HTTP"
				} ],
				"HealthCheck" : {
					"Target" : "HTTP:7979/users/login",
					"HealthyThreshold" : "3",
					"UnhealthyThreshold" : "5",
					"Interval" : "30",
					"Timeout" : "25"
				}
			}
		},
		"DataElasticLoadBalancer" : {
			"Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
			"Condition" : "othersRoleCreations",
			"Properties" : {
				"Instances" : [ { "Ref" : "Http2kInstance" } ],
				"CrossZone" : "true",
				"SecurityGroups" : [ { "Ref" : "WebLoadBalancerSecurityGroup" } ], 
				"Subnets" : [ { "Ref" : "PublicSubnet" } ],
				"ConnectionDrainingPolicy" : {
					"Enabled" : "true",
					"Timeout" : "30"
				},
				"Listeners" : [ {
					"LoadBalancerPort" : "443",
					"InstancePort" : "7980",
					"Protocol" : "SSL",
					"InstanceProtocol" : "TCP",
					"SSLCertificateId" : { "Fn::Join" : [ "", [ "arn:aws:iam::", { "Ref" : "AWS::AccountId" }, 
						":server-certificate/", { "Ref" : "DataSSLCertificateName" } ] ] }
				} ],
				"HealthCheck" : {
					"Target" : "TCP:7980",
					"HealthyThreshold" : "3",
					"UnhealthyThreshold" : "5",
					"Interval" : "30",
					"Timeout" : "25"
				}
			}
		},
		"CoreElasticLoadBalancer" : {
			"Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties" : {
				"Instances" : [ { "Ref" : "CorezkInstance" } ],
				"CrossZone" : "true",
				"SecurityGroups" : [ { "Ref" : "WebLoadBalancerSecurityGroup" } ], 
				"Subnets" : [ { "Ref" : "PublicSubnet" } ],
				"Scheme" : "internal",
				"ConnectionDrainingPolicy" : {
					"Enabled" : "true",
					"Timeout" : "30"
				},
				"Listeners" : [ {
					"LoadBalancerPort" : "443",
					"InstancePort" : "7979",
					"Protocol" : "HTTPS",
					"InstanceProtocol" : "HTTP",
					"SSLCertificateId" : { "Fn::Join" : [ "", [ "arn:aws:iam::", { "Ref" : "AWS::AccountId" }, 
						":server-certificate/", { "Ref" : "WebSSLCertificateName" } ] ] }
				} ],
				"HealthCheck" : {
					"Target" : "TCP:7979",
					"HealthyThreshold" : "3",
					"UnhealthyThreshold" : "5",
					"Interval" : "30",
					"Timeout" : "25"
				}
			}
		},
		"KafkaElasticLoadBalancer" : {
			"Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties" : {
				"Instances" : [ { "Ref" : "KafkaInstance" } ],
				"CrossZone" : "true",
				"SecurityGroups" : [ { "Ref" : "KafkaLoadBalancerSecurityGroup" } ],
				"Subnets" : [ { "Ref" : "PublicSubnet" } ],
				"Scheme" : "internal",
				"ConnectionDrainingPolicy" : {
					"Enabled" : "true",
					"Timeout" : "30"
				},
				"Listeners" : [ {
					"LoadBalancerPort" : "9092",
					"InstancePort" : "9092",
					"Protocol" : "TCP",
					"InstanceProtocol" : "TCP"
				} ],
				"HealthCheck" : {
					"Target" : "TCP:9092",
					"HealthyThreshold" : "3",
					"UnhealthyThreshold" : "5",
					"Interval" : "30",
					"Timeout" : "25"
				}
			}
		},

		"MasterInstance" : {
			"Type" : "AWS::EC2::Instance",
			"DependsOn" : "AttachGateway",
			"Condition" : "masterRoleCreation",
			"Properties" : {
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "master", { "Ref" : "InstanceSize" } ] },
				"ImageId" : { "Ref" : "AMI" },
				"KeyName"        : { "Ref" : "KeyName" },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"NetworkInterfaces": [ {
					"AssociatePublicIpAddress": "true",
					"DeviceIndex": "0",
					"GroupSet": [{ "Ref" : "redBorderPublicSecurityGroup" }],
					"SubnetId": { "Ref" : "PublicSubnet" }
				} ],
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "500",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
					"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
					"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=master\n",
					"MODULES=\"flow:true location:true ips:true monitor:true malware:false social:true\"\n",
					"#NODESERVICES=\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n",
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n",
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=masterGroup\n",
					"LOGWATCHG=", { "Ref" : "AWS::StackName" }, "\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n",
					"S3BUCKET=", { "Fn::If" : [ "S3Creation", { "Ref" : "S3Bucket" }, { "Ref" : "PreviousS3Bucket" } ] }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"S3TYPE=aws\n",
					"CLOUDDNS=1\n",
					"LBINTERNAL=0\n",
					"ROUTE53NAMES=master\n",
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"CHEF_AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKeyChef" }, "\"\n",
					"CHEF_AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKeyChef", "SecretAccessKey" ] }, "\"\n",
					{ "Fn::If" : [ "Restore", "CRESTORE=1\n", "" ] },
					"#ENRICHMODE=samza\n",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"cloudwatch\" : \"true\"\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } },
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "master"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				},{
					"Key" : "Name",
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - master" ] ] }
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : "1",
					"Timeout" : "PT200M"
				}
			}
		},
		"masterElasticIP" : {
			"Type" : "AWS::EC2::EIP",
			"Condition" : "masterRoleCreation",
			"Properties" : {
				"InstanceId" : { "Ref" : "MasterInstance" },
				"Domain" : { "Ref" : "VPC" }
			}
		},

		"CustomInstance" : {
			"Type" : "AWS::EC2::Instance",
			"DependsOn" : "MasterInstance",
			"Condition" : "customRoleCreation",
			"Properties" : {
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "custom", { "Ref" : "InstanceSize" } ] },
				"ImageId" : { "Ref" : "AMI" },
				"KeyName"        : { "Ref" : "KeyName" },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"NetworkInterfaces": [ {
					"AssociatePublicIpAddress": "true",
					"DeviceIndex": "0",
					"GroupSet": [{ "Ref" : "redBorderPublicSecurityGroup" }],
					"SubnetId": { "Ref" : "PublicSubnet" }
				} ],
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "500",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
					"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
					"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=custom\n",
					"#NODESERVICES=\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n",
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n",
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=customGroup\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n",
					"S3BUCKET=", { "Fn::If" : [ "S3Creation", { "Ref" : "S3Bucket" }, { "Ref" : "PreviousS3Bucket" } ] }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"S3TYPE=aws\n",
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"cloudwatch\" : \"true\"\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } },
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "master"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				},{
					"Key" : "Name",
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - master" ] ] }
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : "1",
					"Timeout" : "PT200M"
				}
			}
		},
		"customElasticIP" : {
			"Type" : "AWS::EC2::EIP",
			"Condition" : "customRoleCreation",
			"Properties" : {
				"InstanceId" : { "Ref" : "CustomInstance" },
				"Domain" : { "Ref" : "VPC" }
			}
		},

		"CorezkInstance" : {
			"Type" : "AWS::EC2::Instance",
			"DependsOn" : "AttachGateway",
			"Condition" : "othersRoleCreations",
			"Properties" : {
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "corezk", { "Ref" : "InstanceSize" } ] },
				"ImageId" : { "Ref" : "AMI" },
				"KeyName"        : { "Ref" : "KeyName" },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"NetworkInterfaces": [ {
					"AssociatePublicIpAddress": "true",
					"DeviceIndex": "0",
					"GroupSet": [{ "Ref" : "redBorderPublicSecurityGroup" }],
					"SubnetId": { "Ref" : "PublicSubnet" }
				} ],
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "500",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
					"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
					"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=corezk\n",
					"MODULES=\"flow:true location:true ips:true monitor:true malware:false social:true\"\n",
					"NODESERVICES=\"rb-cloudwatch:1\"\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n",
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n",
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=corezkGroup\n",
					"LOGWATCHG=", { "Ref" : "AWS::StackName" }, "\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n",
					"S3BUCKET=", { "Fn::If" : [ "S3Creation", { "Ref" : "S3Bucket" }, { "Ref" : "PreviousS3Bucket" } ] }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"S3TYPE=aws\n",
					"CLOUDDNS=1\n",
					"LBINTERNAL=1\n",
					"ROUTE53NAMES=master\n",
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"CHEF_AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKeyChef" }, "\"\n",
					"CHEF_AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKeyChef", "SecretAccessKey" ] }, "\"\n",
					"ENRICHMODE=samza\n",
					{ "Fn::If" : [ "Restore", "CRESTORE=1\n", "" ] },
					"CMDFINISH='rb_druid_rules.rb -t _default -p none -r 1 -d forever -i 1'",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"cloudwatch\" : \"true\"\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } },
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "corezk"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				},{
					"Key" : "Name",
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - corezk" ] ] }
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : "1",
					"Timeout" : "PT200M"
				}
			}
		},

		"KafkaInstance" : {
			"Type" : "AWS::EC2::Instance",
			"DependsOn" : "CorezkInstance",
			"Condition" : "othersRoleCreations",
			"Properties" : {
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "kafka", { "Ref" : "InstanceSize" } ] },
				"ImageId" : { "Ref" : "AMI" },
				"KeyName"        : { "Ref" : "KeyName" },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"NetworkInterfaces": [ {
					"AssociatePublicIpAddress": "true",
					"DeviceIndex": "0",
					"GroupSet": [{ "Ref" : "redBorderPublicSecurityGroup" }],
					"SubnetId": { "Ref" : "PublicSubnet" }
				} ],
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "50",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
					"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
					"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=kafka\n",
					"#NODESERVICES=\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n",
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n",
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=kafkaGroup\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n",
					"S3BUCKET=", { "Fn::If" : [ "S3Creation", { "Ref" : "S3Bucket" }, { "Ref" : "PreviousS3Bucket" } ] }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"S3TYPE=aws\n",
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"cloudwatch\" : \"true\"\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } },
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "kafka"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				},{
					"Key" : "Name",
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - kafka" ] ] }
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : "1",
					"Timeout" : "PT200M"
				}
			}
		},

		"Http2kInstance" : {
			"Type" : "AWS::EC2::Instance",
			"DependsOn" : "KafkaInstance",
			"Condition" : "othersRoleCreations",
			"Properties" : {
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "http2k", { "Ref" : "InstanceSize" } ] },
				"ImageId" : { "Ref" : "AMI" },
				"KeyName"        : { "Ref" : "KeyName" },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"NetworkInterfaces": [ {
					"AssociatePublicIpAddress": "true",
					"DeviceIndex": "0",
					"GroupSet": [{ "Ref" : "redBorderPublicSecurityGroup" }],
					"SubnetId": { "Ref" : "PublicSubnet" }
				} ],
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "50",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
					"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
					"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=http2k\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n",
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n",
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=http2kGroup\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n",
					"S3BUCKET=", { "Fn::If" : [ "S3Creation", { "Ref" : "S3Bucket" }, { "Ref" : "PreviousS3Bucket" } ] }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"S3TYPE=aws\n",
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"cloudwatch\" : \"true\",\n",
					"      \"autoscaled\" : \"true\"\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } },
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "http2k"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				},{
					"Key" : "Name",
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - http2k" ] ] }
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : "1",
					"Timeout" : "PT200M"
				}
			}
		},

		"WebInstance" : {
			"Type" : "AWS::EC2::Instance",
			"DependsOn" : "KafkaInstance",
			"Condition" : "othersRoleCreations",
			"Properties" : {
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "web", { "Ref" : "InstanceSize" } ] },
				"ImageId" : { "Ref" : "AMI" },
				"KeyName"        : { "Ref" : "KeyName" },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"NetworkInterfaces": [ {
					"AssociatePublicIpAddress": "true",
					"DeviceIndex": "0",
					"GroupSet": [{ "Ref" : "redBorderPublicSecurityGroup" }],
					"SubnetId": { "Ref" : "PublicSubnet" }
				} ],
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "50",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
					"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
					"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=web\n",
					"#NODESERVICES=\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n",
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n",
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=webGroup\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n",
					"S3BUCKET=", { "Fn::If" : [ "S3Creation", { "Ref" : "S3Bucket" }, { "Ref" : "PreviousS3Bucket" } ] }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"S3TYPE=aws\n",
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"autoscaled\" : \"true\",\n",
					"      \"cloudwatch\" : \"true\"\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } },
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "web"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				},{
					"Key" : "Name",
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - web" ] ] }
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : "1",
					"Timeout" : "PT200M"
				}
			}
		},


		"BrokerInstance" : {
			"Type" : "AWS::EC2::Instance",
			"DependsOn" : "KafkaInstance",
			"Condition" : "othersRoleCreations",
			"Properties" : {
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "broker", { "Ref" : "InstanceSize" } ] },
				"ImageId" : { "Ref" : "AMI" },
				"KeyName"        : { "Ref" : "KeyName" },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"NetworkInterfaces": [ {
					"AssociatePublicIpAddress": "true",
					"DeviceIndex": "0",
					"GroupSet": [{ "Ref" : "redBorderPublicSecurityGroup" }],
					"SubnetId": { "Ref" : "PublicSubnet" }
				} ],
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "50",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
					"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
					"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=middleManager\n",
					"#NODESERVICES=\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n",
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n",
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=middlemanagerGroup\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n",
					"S3BUCKET=", { "Fn::If" : [ "S3Creation", { "Ref" : "S3Bucket" }, { "Ref" : "PreviousS3Bucket" } ] }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"S3TYPE=aws\n",
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"cloudwatch\" : \"true\",\n",
					"      \"autoscaled\" : \"true\"\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } },
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "broker"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				},{
					"Key" : "Name",
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - broker" ] ] }
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : "1",
					"Timeout" : "PT200M"
				}
			}
		},
		"brokerElasticIP" : {
			"Type" : "AWS::EC2::EIP",
			"Condition" : "othersRoleCreations",
			"Properties" : {
				"InstanceId" : { "Ref" : "BrokerInstance" },
				"Domain" : { "Ref" : "VPC" }
			}
		},

		"middleManagerInstance" : {
			"Type" : "AWS::EC2::Instance",
			"DependsOn" : "KafkaInstance",
			"Condition" : "othersRoleCreations",
			"Properties" : {
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "middlemanager", { "Ref" : "InstanceSize" } ] },
				"ImageId" : { "Ref" : "AMI" },
				"KeyName"        : { "Ref" : "KeyName" },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"NetworkInterfaces": [ {
					"AssociatePublicIpAddress": "true",
					"DeviceIndex": "0",
					"GroupSet": [{ "Ref" : "redBorderPublicSecurityGroup" }],
					"SubnetId": { "Ref" : "PublicSubnet" }
				} ],
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "50",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
					"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
					"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=middleManager\n",
					"#NODESERVICES=\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n",
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n",
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=middlemanagerGroup\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n",
					"S3BUCKET=", { "Fn::If" : [ "S3Creation", { "Ref" : "S3Bucket" }, { "Ref" : "PreviousS3Bucket" } ] }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"S3TYPE=aws\n",
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"cloudwatch\" : \"true\",\n",
					"      \"autoscaled\" : \"true\"\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } },
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "middleManager"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				},{
					"Key" : "Name",
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - middleManager" ] ] }
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : "1",
					"Timeout" : "PT200M"
				}
			}
		},

		"historicalInstance" : {
			"Type" : "AWS::EC2::Instance",
			"DependsOn" : "KafkaInstance",
			"Condition" : "othersRoleCreations",
			"Properties" : {
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "historical", { "Ref" : "InstanceSize" } ] },
				"ImageId" : { "Ref" : "AMI" },
				"KeyName"        : { "Ref" : "KeyName" },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"NetworkInterfaces": [ {
					"AssociatePublicIpAddress": "true",
					"DeviceIndex": "0",
					"GroupSet": [{ "Ref" : "redBorderPublicSecurityGroup" }],
					"SubnetId": { "Ref" : "PublicSubnet" }
				} ],
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "500",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
					"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
					"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=historical\n",
					"#NODESERVICES=\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n",
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n",
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=historicalGroup\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n",
					"S3BUCKET=", { "Fn::If" : [ "S3Creation", { "Ref" : "S3Bucket" }, { "Ref" : "PreviousS3Bucket" } ] }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"S3TYPE=aws\n",
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"cloudwatch\" : \"true\",\n",
					"      \"autoscaled\" : \"true\"\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } },
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "historical"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				},{
					"Key" : "Name",
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - historical" ] ] }
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : "1",
					"Timeout" : "PT200M"
				}
			}
		},

		"samzaInstance" : {
			"Type" : "AWS::EC2::Instance",
			"DependsOn" : "KafkaInstance",
			"Condition" : "othersRoleCreations",
			"Properties" : {
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "samza", { "Ref" : "InstanceSize" } ] },
				"ImageId" : { "Ref" : "AMI" },
				"KeyName"        : { "Ref" : "KeyName" },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"NetworkInterfaces": [ {
					"AssociatePublicIpAddress": "true",
					"DeviceIndex": "0",
					"GroupSet": [{ "Ref" : "redBorderPublicSecurityGroup" }],
					"SubnetId": { "Ref" : "PublicSubnet" }
				} ],
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "50",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
					"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
					"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=samza\n",
					"NODESERVICES=\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n",
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n",
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=samzaGroup\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n",
					"S3BUCKET=", { "Fn::If" : [ "S3Creation", { "Ref" : "S3Bucket" }, { "Ref" : "PreviousS3Bucket" } ] }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"S3TYPE=aws\n",
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"cloudwatch\" : \"true\"\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } },
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "samza"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				},{
					"Key" : "Name",
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - samza" ] ] }
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : "1",
					"Timeout" : "PT200M"
				}
			}
		}
	}
}
