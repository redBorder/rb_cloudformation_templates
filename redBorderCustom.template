{
	"AWSTemplateFormatVersion" : "2010-09-09",

	"Description" : "AWS CloudFormation template to deploy redBorder Horama Manager",

	"Parameters" : {
		"AMI" : {
			"Description" : "redBorder AMI ID to deploy", 
			"Type" : "String"
		}, 
		"AMIOpenVPN" : {
			"Description" : "openvpn for redBorder AMI to deploy",
			"Type" : "String"
		},
		"MinCorezkInstances" : {
			"Description" : "minimun number of nodes for corezk role.",
			"Type" : "Number",
			"MinValue" : "1",
			"MaxValue" : "10",
			"Default" : "1",
			"ConstraintDescription" : "number of nodes must between 1 and 10"
		},
		"MinKafkaInstances" : {
			"Description" : "minimun number of nodes for kafka role.",
			"Type" : "Number",
			"MinValue" : "1",
			"MaxValue" : "10",
			"Default" : "1",
			"ConstraintDescription" : "number of nodes must between 1 and 10"
		},
		"MinWebInstances" : {
			"Description" : "minimun number of nodes for web role.",
			"Type" : "Number",
			"MinValue" : "1",
			"MaxValue" : "10",
			"Default" : "1",
			"ConstraintDescription" : "number of nodes must between 1 and 10"
		},
		"MinHttp2kInstances" : {
			"Description" : "minimun number of nodes for http2k role.",
			"Type" : "Number",
			"MinValue" : "0",
			"MaxValue" : "10",
			"Default" : "1",
			"ConstraintDescription" : "number of nodes must between 0 and 10"
		},
		"MinMiddlemanagerInstances" : {
			"Description" : "minimun number of nodes for broker role.",
			"Type" : "Number",
			"MinValue" : "1",
			"MaxValue" : "10",
			"Default" : "1",
			"ConstraintDescription" : "number of nodes must between 1 and 10"
		},
		"MinBrokerInstances" : {
			"Description" : "minimun number of nodes for broker role.",
			"Type" : "Number",
			"MinValue" : "1",
			"MaxValue" : "10",
			"Default" : "1",
			"ConstraintDescription" : "number of nodes must between 1 and 10"
		},
		"MinHistoricalInstances" : {
			"Description" : "minimun number of nodes for historical role.",
			"Type" : "Number",
			"MinValue" : "1",
			"MaxValue" : "10",
			"Default" : "1",
			"ConstraintDescription" : "number of nodes must between 1 and 10"
		},
		"MinHistoricalhotInstances" : {
			"Description" : "minimun number of nodes for historicalhot role.",
			"Type" : "Number",
			"MinValue" : "1",
			"MaxValue" : "10",
			"Default" : "1",
			"ConstraintDescription" : "number of nodes must between 1 and 10"
		},
		"MinSamzaInstances" : {
			"Description" : "minimun number of nodes for samza role.",
			"Type" : "Number",
			"MinValue" : "1",
			"MaxValue" : "10",
			"Default" : "1",
			"ConstraintDescription" : "number of nodes must between 1 and 10"
		},
		"HistoricalGenericInstances" : {
			"Description" : "number of nodes for historialGeneric role.",
			"Type" : "Number",
			"MinValue" : "0",
			"MaxValue" : "10",
			"Default" : "0",
			"ConstraintDescription" : "number of nodes must between 0 and 10"
		},
		"InstanceSize" : {
			"Description" : "performance of each node (instance types). Instance types will be choosen automatically in function of this parameter",
			"Type" : "String",
			"AllowedValues" : [ "small", "medium", "large" ],
			"Default" : "small"
		}, 
		"KeyName" : {
			"Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
			"Type" : "AWS::EC2::KeyPair::KeyName",
			"ConstraintDescription" : "must be the name of an existing AWS EC2 KeyPair"
		},
		"Email" : {
			"Description" : "Email address to notify cloudwatch alarms",
			"Type" : "String",
			"AllowedPattern": "([a-zA-Z0-9_\\-\\.]+)@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.)|(([a-zA-Z0-9\\-]+\\.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(\\]?)",
      		"ConstraintDescription": "must be a valid email address."
		},
		"CDOMAIN" : {
			"Description" : "DNS Domain for cluster",
			"Type" : "String", 
			"Default" : "redbordercloud.com"
		},
		"WebSSLCertificateName" : {
			"Description" : "SSL Certificate for web load balancer",
			"Type" : "String"
		},
		"DataSSLCertificateName" : {
			"Description" : "SSL Certificate for data load balancer",
			"Type" : "String"
		},
		"UseRDS" : {
			"Description" : "Indicates if you want to use AWS Relational Database Service for PostgreSQL or you prefer to use PostgreSQL provided by redBorder",
			"Type" : "String",
			"AllowedValues" : [ "true", "false" ],
			"Default" : "false"
		},
		"UseElasticache" : {
			"Description" : "Indicates if you want to use AWS Elasticache for Memcached or you prefer to use Memcached provided by redBorder",
			"Type" : "String",
			"AllowedValues" : [ "true", "false" ],
			"Default" : "false"
		},
		"CreateInternalLoadBalancers" : {
			"Description" : "Indicates if you want internal load balancers (only for cisco environments)",
			"Type" : "String",
			"AllowedValues" : [ "true", "false" ],
			"Default" : "false"
		},
		"CreateOpenVPNInstance" : {
			"Description" : "Indicates if you want VPN access to public and private subnets",
			"Type" : "String",
			"AllowedValues" : [ "true", "false" ],
			"Default" : "true"
		},
		"openVPNAdminPasswd" : {
			"Description" : "Password for administrator access to OpenVPN server (with user redborder)",
			"Type" : "String",
			"NoEcho" : "true",
			"MinLength" : "0",
			"MaxLength"	: "41",
			"ConstraintDescription" : "must contain only alphanumeric characters and must have a minium of 8 characters and a maximum of 41"		
		},
		"DBPassword": {
			"NoEcho": "true",
			"Description" : "The database admin account password",
			"Default" : "AWSrdsForredBorder", 
			"Type": "String",
			"MinLength": "0",
			"MaxLength": "41",
			"AllowedPattern" : "[a-zA-Z0-9]*",
			"ConstraintDescription" : "must contain only alphanumeric characters and must have a minium of 8 characters and a maximum of 41"
		}
	},

	"Mappings" : {
		"InstanceTypeMap" : {
			"master" :            { "small":"m4.xlarge",      "medium":"m4.2xlarge",      "large":"m4.4xlarge"       },
			"custom" :            { "small":"m4.large",       "medium":"m4.2xlarge",      "large":"m4.4xlarge"       },
			"corezk" :            { "small":"m4.large",       "medium":"i2.xlarge",       "large":"i2.2xlarge"       },
			"kafka" :             { "small":"m4.large",       "medium":"i2.xlarge",       "large":"i2.2xlarge"       },
			"http2k" :            { "small":"m4.large",       "medium":"c4.large",        "large":"c4.2xlarge"       },
			"web" :               { "small":"m4.large",       "medium":"c4.xlarge",       "large":"c4.4xlarge"       },
			"broker" :            { "small":"m4.large",       "medium":"r3.xlarge",       "large":"r3.2xlarge"       },
			"middlemanager" :     { "small":"m4.large",       "medium":"r3.2xlarge",      "large":"r3.8xlarge"       },
			"historical" :        { "small":"m4.large",       "medium":"c4.2xlarge",      "large":"c4.8xlarge"       },
			"historicalhot" :     { "small":"m4.large",       "medium":"r3.xlarge",       "large":"m4.10xlarge"      },
			"historicalGeneric" : { "small":"m4.large",       "medium":"r3.xlarge",       "large":"m4.10xlarge"      },
			"samza" :             { "small":"m4.xlarge",      "medium":"c4.4xlarge",      "large":"c4.8xlarge"       },
			"rds" :               { "small":"db.m3.large",    "medium":"db.m3.2xlarge",   "large":"db.r3.large"      },
			"memcached" :         { "small":"cache.t2.small", "medium":"cache.m3.xlarge", "large":"cache.m3.2xlarge" }
		}
	},

	"Conditions" : {		
		"RDSCreation" : {
			"Fn::Equals" : [ "true", { "Ref" : "UseRDS" } ]
		},
		"ElasticacheCreation" : {
			"Fn::Equals" : [ "true", { "Ref" : "UseElasticache" } ]
		},
		"openVPNInstanceCreation" : {
			"Fn::Equals" : [ "true", { "Ref" : "CreateOpenVPNInstance" } ]
		},
		"InternalLoadBalancerCreation" : {
			"Fn::Equals" : [ "true", { "Ref" : "CreateInternalLoadBalancers" } ]
		},
		"regionNVirginia" : {
			"Fn::Equals" : [ "us-east-1", { "Ref" : "AWS::Region" } ]
		},
		"kafkaRoleCreation" : {
			"Fn::Not" : [ { "Fn::Equals" : [ "0",  { "Ref" : "MinKafkaInstances" } ] } ]
		},
		"http2kRoleCreation" : {
			"Fn::Not" : [ { "Fn::Equals" : [ "0",  { "Ref" : "MinHttp2kInstances" } ] } ]
		},
		"webRoleCreation" : {
			"Fn::Not" : [ { "Fn::Equals" : [ "0",  { "Ref" : "MinWebInstances" } ] } ]
		},
		"brokerRoleCreation" : {
			"Fn::Not" : [ { "Fn::Equals" : [ "0",  { "Ref" : "MinBrokerInstances" } ] } ]
		},
		"middlemanagerRoleCreation" : {
			"Fn::Not" : [ { "Fn::Equals" : [ "0",  { "Ref" : "MinMiddlemanagerInstances" } ] } ]
		},
		"historicalRoleCreation" : {
			"Fn::Not" : [ { "Fn::Equals" : [ "0",  { "Ref" : "MinHistoricalInstances" } ] } ]
		},
		"historicalhotRoleCreation" : {
			"Fn::Not" : [ { "Fn::Equals" : [ "0",  { "Ref" : "MinHistoricalhotInstances" } ] } ]
		},
		"historicalGenericRoleCreation" : {
			"Fn::Not" : [ { "Fn::Equals" : [ "0",  { "Ref" : "MinHistoricalhotInstances" } ] } ]
		},
		"samzaRoleCreation" : {
			"Fn::Not" : [ { "Fn::Equals" : [ "0",  { "Ref" : "MinSamzaInstances" } ] } ]
		}
	},
	
	"Resources" : {
		"VPC" : {
			"Type" : "AWS::EC2::VPC",
			"Properties" : {
				"CidrBlock" : "172.16.0.0/16",
				"EnableDnsSupport" : "true",
				"EnableDnsHostnames" : "true",
				"InstanceTenancy" : "default",
				"Tags" : [ { "Key" : "Name", "Value" : { "Fn::Join" : [ " - ", [ { "Ref" : "AWS::StackName" }, "VPC" ] ] } } ]
			}
		},
		"PublicSubnet" : {
			"Type" : "AWS::EC2::Subnet",
			"Properties" : {
				"VpcId" : { "Ref" : "VPC" },
				"CidrBlock" : "172.16.1.0/24",
				"AvailabilityZone" : { "Fn::Select" : [ 0, { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
				"Tags" : [ { "Key" : "Name", "Value" : { "Fn::Join" : [ " - ", [ { "Ref" : "AWS::StackName" }, "PublicSubnet" ] ] } } ]
			}
		},
		"PrivateSubnet" : {
			"Type" : "AWS::EC2::Subnet",
			"Properties" : {
				"VpcId" : { "Ref" : "VPC" },
				"CidrBlock" : "172.16.2.0/24",
				"AvailabilityZone" : { "Fn::GetAtt" : [ "PublicSubnet", "AvailabilityZone" ] },
				"Tags" : [ { "Key" : "Name", "Value" : { "Fn::Join" : [ " - ", [ { "Ref" : "AWS::StackName" }, "PrivateSubnet" ] ] } } ]
			}
		},
		"BackupSubnet" : {
			"Type" : "AWS::EC2::Subnet",
			"Condition" : "RDSCreation",
			"Properties" : {
				"VpcId" : { "Ref" : "VPC" },
				"CidrBlock" : "172.16.3.0/24",
				"AvailabilityZone" : { "Fn::Select" : [ 1, { "Fn::GetAZs" : { "Ref" : "AWS::Region" } } ] },
				"Tags" : [ { "Key" : "Name", "Value" : { "Fn::Join" : [ " - ", [ { "Ref" : "AWS::StackName" }, "BackupSunbet" ] ] } } ]
			}
		}, 
		"InternetGateway" : {
			"Type" : "AWS::EC2::InternetGateway",
			"Properties" : {
				"Tags" : [ { "Key" : "Name", "Value" : { "Fn::Join" : [ " - ", [ { "Ref" : "AWS::StackName" }, "InternetGateway" ] ] } } ]
			}
		},
		"AttachGateway" : {
			"Type" : "AWS::EC2::VPCGatewayAttachment",
			"Properties" : {
				"VpcId" : { "Ref" : "VPC" },
				"InternetGatewayId" : { "Ref" : "InternetGateway" }
			}
		},
		"RouteTable" : {
			"Type" : "AWS::EC2::RouteTable",
			"Properties" : {
				"VpcId" : { "Ref" : "VPC" },
				"Tags" : [ { "Key" : "Name", "Value" : { "Fn::Join" : [ " - ", [ { "Ref" : "AWS::StackName" }, "RouteTable" ] ] } } ]
			}
		},
		"Route" : {
			"Type" : "AWS::EC2::Route",
			"DependsOn" : "AttachGateway",
			"Properties" : {
				"RouteTableId" : { "Ref" : "RouteTable" },
				"DestinationCidrBlock" : "0.0.0.0/0",
				"GatewayId" : { "Ref" : "InternetGateway" }
			}
		},
		"PublicSubnetRouteTableAssociation" : {
			"Type" : "AWS::EC2::SubnetRouteTableAssociation",
			"Properties" : {
				"SubnetId" : { "Ref" : "PublicSubnet" },
				"RouteTableId" : { "Ref" : "RouteTable" }
			}
		},
		"IAMRole" : {
			"Type" : "AWS::IAM::Role",
			"Properties" : {
				"AssumeRolePolicyDocument" : {
					"Version" : "2012-10-17", 
					"Statement" : [ {
						"Effect" : "Allow", 
						"Principal" : {
							"Service" : [ "ec2.amazonaws.com" ]
						},
						"Action" : [ "sts:AssumeRole" ]
					} ]
				},
				"Path" : "/"
			}
		},
		"IAMInstanceProfile" : {
			"Type" : "AWS::IAM::InstanceProfile",
			"Properties" : {
				"Path" : "/",
				"Roles" : [ { "Ref" : "IAMRole" } ]
			}
		},
		"IAMUser" : {
			"Type" : "AWS::IAM::User",
			"Properties" : { }
		},
		"IAMAccessKey" : {
			"Type" : "AWS::IAM::AccessKey",
			"Properties" : {
				"Status" : "Active",
				"UserName" : { "Ref" : "IAMUser" }
			}
		},
		"IAMPolicy" : {
			"Type" : "AWS::IAM::Policy", 
			"Properties" : {
				"PolicyName" : "RB-CF-POLICY", 
				"PolicyDocument" : {
					"Version" : "2012-10-17",
					"Statement": [ {
						"Action" : [ 
							"ec2:CreateNetworkInterface", 
							"ec2:AttachNetworkInterface",
							"ec2:ModifyNetworkInterfaceAttribute",
							"ec2:DescribeInstances",
							"ec2:AssignPrivateIpAddresses",
							"ec2:UnassignPrivateIpAddresses",
							"ec2:DescribeTags" ],
						"Effect" : "Allow",
						"Resource" : "*"
					}, {
						"Action" : "s3:*",
						"Effect" : "Allow", 
						"Resource" : [ { "Fn::Join" :
							[ "", [ "arn:aws:s3:::", 
							{ "Ref" : "S3Bucket" }, "/*" ] ] },
							{ "Fn::Join" : 
							[ "", [ "arn:aws:s3:::",
							{ "Ref" : "S3Bucket" } ] ] } ]
					}, {
						"Effect": "Allow",
						"Action": [ "cloudformation:DescribeStackResource" ],
						"Resource": { "Fn::Join" : [ "", [ "arn:aws:cloudformation:", { "Ref" : "AWS::Region" }, ":", 
									{ "Ref" : "AWS::AccountId" }, ":stack/", { "Ref" : "AWS::StackName" }, "/*"   ] ] }
					},{
						"Effect": "Allow",
						"Action" : [ "cloudwatch:PutMetricData", "cloudwatch:DescribeAlarms" ],
						"Resource" : "*"
					},{
						"Effect": "Allow",
						"Action" : [ "route53:ChangeResourceRecordSets", "route53:ListHostedZones", "route53:ListResourceRecordSets" ],
						"Resource" : [ { "Fn::Join" : [ "", [ "arn:aws:route53:::hostedzone/", { "Ref" : "PublicHostedZone" } ] ] }, 
									   { "Fn::Join" : [ "", [ "arn:aws:route53:::hostedzone/", { "Ref" : "PrivateHostedZone" } ] ] } ]
					},{
						"Effect": "Allow",
						"Action" : [ "route53:ListHostedZones", "route53:ChangeResourceRecordSets", "route53:GetHostedZone" ],
						"Resource" : "*"
					},{
						"Effect": "Allow",
						"Action" : [ "autoscaling:TerminateInstanceInAutoscalingGroup", "autoscaling:DescribeAutoscalingGroups",
									 "autoscaling:CompleteLifecycleAction" ],
						"Resource" : "*"
					},{
						"Effect": "Allow",
						"Action" : [ "sqs:ReceiveMessage", "sqs:DeleteMessage" ],
						"Resource" : [ { "Fn::GetAtt" : [ "SQSQueue", "Arn" ] } ]
					},{
						"Effect": "Allow",
						"Action" : [ "logs:*" ],
						"Resource" : "*"
					} ]
				},
				"Roles" :  [ { "Ref" : "IAMRole" } ],
				"Users" : [ { "Ref" : "IAMUser" } ]
			}
		},
		"IAMUserChef" : {
			"Type" : "AWS::IAM::User",
			"Properties" : { }
		},
		"IAMAccessKeyChef" : {
			"Type" : "AWS::IAM::AccessKey",
			"Properties" : {
				"Status" : "Active",
				"UserName" : { "Ref" : "IAMUserChef" }
			}
		},
		"IAMPolicyChef" : {
			"Type" : "AWS::IAM::Policy", 
			"Properties" : {
				"PolicyName" : "RB-CF-POLICY", 
				"PolicyDocument" : {
					"Version" : "2012-10-17",
					"Statement": [ {
						"Action" : "s3:*",
						"Effect" : "Allow", 
						"Resource" : [ { "Fn::Join" :
							[ "", [ "arn:aws:s3:::", 
							{ "Ref" : "S3Bucket" }, 
							"/organization-00000000000000000000000000000000/*" ] ] } ]
					} ]
				},
				"Users" : [ { "Ref" : "IAMUserChef" } ]
			}
		},
		"IAMRoleLifecycleHook" : {
			"Type" : "AWS::IAM::Role",
			"Properties" : {
				"AssumeRolePolicyDocument" : {
					"Version" : "2012-10-17", 
					"Statement" : [ {
						"Effect" : "Allow", 
						"Principal" : {
							"Service" : [ "ec2.amazonaws.com", "autoscaling.amazonaws.com" ]
						},
						"Action" : [ "sts:AssumeRole" ]
					} ]
				},
				"Path" : "/"
			}
		},
		"IAMPolicyLifecycleHook" : {
			"Type" : "AWS::IAM::Policy", 
			"Properties" : {
				"PolicyName" : "RB-CF-POLICY-FOR-LIFECYCLE-HOOKS", 
				"PolicyDocument" :  {
					"Version" : "2012-10-17",
					"Statement": [ {
						"Effect": "Allow",
						"Action" : [ "sqs:*" ],
						"Resource" : [ { "Fn::GetAtt" : [ "SQSQueue", "Arn" ] } ]
					} ]
				},
				"Roles" :  [ { "Ref" : "IAMRoleLifecycleHook" } ]
			}
		},
		"S3Bucket" : {
			"Type" : "AWS::S3::Bucket",
			"Properties" : {
				"AccessControl" : "Private"
			},
			"DeletionPolicy" : "Retain"
		},
		"S3BucketPolicy" : {
			"Type" : "AWS::S3::BucketPolicy",
			"Properties" : {
				"Bucket" : { "Ref" : "S3Bucket" },
				"PolicyDocument" : {
					"Statement" : [ { 
						"Effect" : "Allow",
						"Principal" : "*",
						"Action" : [ "s3:GetObject" ],
						"Resource" : { "Fn::Join" : [ "", [ "arn:aws:s3:::", { "Ref" : "S3Bucket" },
							 "/Public/*" ] ] }
					} ]
				} 
			}
		},
		"SQSQueue" : {
			"Type" : "AWS::SQS::Queue",
			"Properties" : {
				"MessageRetentionPeriod" : "1800",
				"ReceiveMessageWaitTimeSeconds" : "20",
				"VisibilityTimeout" : "30"
			}
		},
		"SQSPolicy" : {
			"Type" : "AWS::SQS::QueuePolicy",
			"Properties" : {
				"Queues" : [ { "Ref" : "SQSQueue" } ],
				"PolicyDocument" : {
					"Version":"2012-10-17",
					"Statement":[ {
						"Sid": { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "SQSQueue", "QueueName"  ] }, "-Policy" ] ] } ,
						"Effect":"Allow",
						"Principal":"*",
						"Action":"sqs:SendMessage",
						"Resource": { "Fn::GetAtt" : [ "SQSQueue", "Arn" ] },
						"Condition":{
							"ArnEquals": { "aws:SourceArn" : { "Ref" : "SNSManagementTopic" } }
						}
					} ]
				}
			}
		}, 
		"SNSManagementTopic" : {
			"Type" : "AWS::SNS::Topic", 
			"Properties" : {
				"Subscription" : [ {
					"Protocol" : "sqs",
					"Endpoint" : { "Fn::GetAtt" : [ "SQSQueue", "Arn" ] }
				} ]
			}
		},
		"SNSNotificationTopic" : {
			"Type" : "AWS::SNS::Topic",
			"Properties" : {
				"Subscription" : [ {
					"Protocol" : "email",
					"Endpoint" : { "Ref" : "Email" }
				}]
			}
		},
		"DBRDS" : {
			"Type" : "AWS::RDS::DBInstance",
			"Condition" : "RDSCreation",
			"Properties" : {
				"AllocatedStorage" : "50",
				"DBInstanceClass" : { "Fn::FindInMap" : [ "InstanceTypeMap", "rds", { "Ref" : "InstanceSize" } ] },
				"Engine" : "postgres",
				"DBName" : "redborderRDS",
				"MasterUsername" : "rdsredborder",
				"MasterUserPassword" : { "Ref" : "DBPassword" }, 
				"PubliclyAccessible" : "false",
				"BackupRetentionPeriod" : "7",
				"MultiAZ" : "true",
				"StorageType" : "gp2",
				"DBSubnetGroupName" : { "Ref" : "DBSubnetGroup" },
				"VPCSecurityGroups" : [ { "Ref" : "DataBaseSecurityGroup" } ]
			}
		},
		"DBSubnetGroup" : {
			"Type" : "AWS::RDS::DBSubnetGroup",
			"Condition" : "RDSCreation",
			"Properties" : {
				"DBSubnetGroupDescription" : "redBorder RDS subnet group",
				"SubnetIds" : [ { "Ref" : "PrivateSubnet" }, { "Ref" : "BackupSubnet" } ]
			}
		}, 
		"Memcached" : {
			"Type" : "AWS::ElastiCache::CacheCluster",
			"Condition" : "ElasticacheCreation",
			"Properties" : {
				"Engine" : "memcached", 
				"PreferredAvailabilityZone" : { "Fn::GetAtt" : [ "PrivateSubnet", "AvailabilityZone" ] },
				"NumCacheNodes" : "1",
				"CacheNodeType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "memcached", { "Ref" : "InstanceSize" } ] }, 
				"CacheSubnetGroupName" : { "Ref" : "MemcachedSubnetGroup" },
				"VpcSecurityGroupIds" : [ { "Ref" : "MemcachedSecurityGroup" } ]
			}
		},
		"MemcachedSubnetGroup" : {
			"Type" : "AWS::ElastiCache::SubnetGroup",
			"Condition" : "ElasticacheCreation",
			"Properties" : {
				"Description" : "Subnet Group for Memcached", 
				"SubnetIds" : [ { "Ref" : "PrivateSubnet" }, { "Ref" : "BackupSubnet" } ]
			}
		},  
		"MemcachedSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Condition" : "ElasticacheCreation",
			"Properties" : {
				"GroupDescription" : "Enable access to DataBase for VPC instances",
				"VpcId" : { "Ref" : "VPC" },
				"SecurityGroupIngress" : [ {
					"IpProtocol" : "tcp",
					"FromPort" : "11211",
					"ToPort" : "11211",
					"CidrIp" : "172.16.0.0/16"
				} ],
				"Tags" : [ {
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				} ]
			}
		},
		"redBorderPublicSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Security group for redBorder bond0 interfaces (public interfaces)",
				"VpcId" : { "Ref" : "VPC" },
				"SecurityGroupIngress" : [ {
					"IpProtocol" : "tcp",
					"FromPort" : { "Fn::If" : [ "openVPNInstanceCreation", "22", "6666" ] },
					"ToPort" : { "Fn::If" : [ "openVPNInstanceCreation", "22", "6666" ] },
					"CidrIp" : { "Fn::If" : [ "openVPNInstanceCreation", "172.16.1.0/24", "0.0.0.0/0" ] } 
				}, {
					"IpProtocol" : "tcp",
					"FromPort" : "80",
					"ToPort" : "80",
					"CidrIp" : "172.16.1.0/24"
				}, {
					"IpProtocol" : "tcp",
					"FromPort" : "7979",
					"ToPort" : "7979",
					"CidrIp" : "172.16.1.0/24"
				}, {
					"IpProtocol" : "tcp",
					"FromPort" : "7980",
					"ToPort" : "7980",
					"CidrIp" : "172.16.1.0/24"
				},  {
					"IpProtocol" : "tcp",
					"FromPort" : "9092",
					"ToPort" : "9092",
					"CidrIp" : "172.16.1.0/24"
				} ],
				"Tags" : [ {
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				}, {
					"Key" : "Name", 
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - rBPublicSG" ] ] }
				} ]
			}
		},
		
		"redBorderPrivateSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Security group for redBorder bond1 interfaces (private interfaces)",
				"VpcId" : { "Ref" : "VPC" },
				"Tags" : [ {
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				}, {
					"Key" : "Name", 
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - rBPrivateSG" ] ] }
				} ]
			}
		},
		"redBorderPrivateSecurityGroupIngress" : {
			"Type" : "AWS::EC2::SecurityGroupIngress",
			"Properties" : {
				"GroupId" : { "Ref" : "redBorderPrivateSecurityGroup" },
				"IpProtocol" : "-1",
				"FromPort" : "-1", 
				"ToPort" : "-1",
				"SourceSecurityGroupId" : { "Ref" : "redBorderPrivateSecurityGroup" }
			}
		},

		"openVPNSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Condition" : "openVPNInstanceCreation",
			"Properties" : {
				"GroupDescription" : "Enable ports for OpenVPN service Port 943 is for administrator web access",
				"VpcId" : { "Ref" : "VPC" },
				"SecurityGroupIngress" : [ { 
					"IpProtocol" : "tcp", 
					"FromPort" : "443",
					"ToPort" : "443",
					"CidrIp" : "0.0.0.0/0"
				}, {
					"IpProtocol" : "tcp", 
					"FromPort" : "943",
					"ToPort" : "943",
					"CidrIp" : "0.0.0.0/0"
				}, {
					"IpProtocol" : "udp", 
					"FromPort" : "1194",
					"ToPort" : "1194",
					"CidrIp" : "0.0.0.0/0"
				} ],
				"Tags" : [ {
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				} ]
			}
		},
		
		"WebLoadBalancerSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Enable SSH, HTTP and HTTPS",
				"VpcId" : { "Ref" : "VPC" },
				"SecurityGroupIngress" : [ {
					"IpProtocol" : "tcp",
					"FromPort" : "443",
					"ToPort" : "443",
					"CidrIp" : "0.0.0.0/0"
				}, {
					"IpProtocol" : "tcp",
					"FromPort" : "80", 
					"ToPort" : "80",
					"CidrIp" : "0.0.0.0/0"
				}, {
					"IpProtocol" : "icmp",
					"FromPort" : "-1",
					"ToPort" : "-1",
					"CidrIp" : "0.0.0.0/0"
				} ],
				"Tags" : [ {
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				} ]
			}
		},
		"CoreLoadBalancerSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Condition" : "InternalLoadBalancerCreation",
			"Properties" : {
				"GroupDescription" : "Enable erchef, postgresql, pgpool, resourcemanager and namenode traffic",
				"VpcId" : { "Ref" : "VPC" },
				"SecurityGroupIngress" : [ {
					"IpProtocol" : "tcp",
					"FromPort" : "443",
					"ToPort" : "443",
					"CidrIp" : "172.16.2.0/24"
				} ],
				"Tags" : [ {
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				} ]
			}
		},
		"KafkaLoadBalancerSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Condition" : "InternalLoadBalancerCreation",
			"Properties" : {
				"GroupDescription" : "Enable Kafka TCP traffic",
				"VpcId" : { "Ref" : "VPC" },
				"SecurityGroupIngress" : [ {
					"IpProtocol" : "tcp",
					"FromPort" : "9092",
					"ToPort" : "9092",
					"CidrIp" : "172.16.2.0/24"
				} ],
				"Tags" : [ {
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				} ]
			}
		},
		"DataBaseSecurityGroup" : {
			"Type" : "AWS::EC2::SecurityGroup",
			"Properties" : {
				"GroupDescription" : "Enable access to DataBase for VPC instances",
				"VpcId" : { "Ref" : "VPC" },
				"SecurityGroupIngress" : [ {
					"IpProtocol" : "tcp",
					"FromPort" : "5432",
					"ToPort" : "5432",
					"CidrIp" : "172.16.0.0/16"
				} ],
				"Tags" : [ {
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }
				} ]
			}
		},
		
		"PublicHostedZone" : { 
			"Type" : "AWS::Route53::HostedZone",
			"Properties" : {
				"HostedZoneConfig" : {
					"Comment" : { "Fn::Join" : [ "", [ "Public Hosted Zone for stack ", { "Ref" : "AWS::StackName" } ] ] }
				},
				"Name" : { "Fn::Join" : [ "", [ { "Ref" : "CDOMAIN" }, "." ] ] }
			}
		},
		"PrivateHostedZone" : {
			"Type" : "AWS::Route53::HostedZone",
			"Properties" : {
				"HostedZoneConfig" : {
					"Comment" : { "Fn::Join" : [ "", [ "Private Hosted Zone for stack ", { "Ref" : "AWS::StackName" } ] ] }
				},
				"Name" : { "Fn::Join" : [ "", [ { "Ref" : "CDOMAIN" }, "." ] ] },
				"VPCs" : [ {
					"VPCId" : { "Ref" : "VPC" }, 
					"VPCRegion" : { "Ref" : "AWS::Region" }
				} ]
			}
		},		
		"PublicWebLoadBalancerDNSName" : {
			"Type" : "AWS::Route53::RecordSet",
			"Properties" : {
				"HostedZoneId" : { "Ref" : "PublicHostedZone" },
				"Name" : { "Ref" : "CDOMAIN" },
				"AliasTarget" : {
					"HostedZoneId" : { "Fn::GetAtt" : [ "WebElasticLoadBalancer", "CanonicalHostedZoneNameID" ] }, 
					"DNSName" : { "Fn::GetAtt" : [ "WebElasticLoadBalancer", "DNSName" ] }
				},
				"Type" : "A"
			}
		},
		"PrivateWebLoadBalancerDNSName" : {
			"Type" : "AWS::Route53::RecordSet",
			"Properties" : {
				"HostedZoneId" : { "Ref" : "PrivateHostedZone" },
				"Name" : { "Ref" : "CDOMAIN" },
				"AliasTarget" : {
					"HostedZoneId" : { "Fn::GetAtt" : [ "WebElasticLoadBalancer", "CanonicalHostedZoneNameID" ] }, 
					"DNSName" : { "Fn::GetAtt" : [ "WebElasticLoadBalancer", "DNSName" ] }
				},
				"Type" : "A"
			}
		},
		"DataLoadBalancerDNSName" : {
			"Type" : "AWS::Route53::RecordSet",
			"Properties" : {
				"HostedZoneId" : { "Ref" : "PublicHostedZone" },
				"Name" : { "Fn::Join" : [ "", [ "data.", { "Ref" : "CDOMAIN" } ] ] }, 
				"AliasTarget" : {
					"HostedZoneId" : 
						{ "Fn::GetAtt" : [ "DataElasticLoadBalancer", "CanonicalHostedZoneNameID" ] },					
					"DNSName" : { "Fn::GetAtt" : [ "DataElasticLoadBalancer", "DNSName" ] }						
				},
				"Type" : "A"
			}
		},
		"ErchefName" : {
			"Type" : "AWS::Route53::RecordSet",
			"Condition" : "InternalLoadBalancerCreation",
			"Properties" : {
				"HostedZoneId" : { "Ref" : "PrivateHostedZone" },
				"Name" : { "Fn::Join" : [ "", [ "erchef.", { "Ref" : "CDOMAIN" } ] ] },
				"AliasTarget" : {
					"HostedZoneId" : { "Fn::GetAtt" : [ "CoreElasticLoadBalancer", "CanonicalHostedZoneNameID" ] }, 
					"DNSName" : { "Fn::GetAtt" : [ "CoreElasticLoadBalancer", "DNSName" ] }
				},
				"Type" : "A"
			}
		},
		"KafkaName" : {
			"Type" : "AWS::Route53::RecordSet",
			"Condition" : "InternalLoadBalancerCreation",
			"Properties" : {
				"HostedZoneId" : { "Ref" : "PrivateHostedZone" },
				"Name" : { "Fn::Join" : [ "", [ "kafka.", { "Ref" : "CDOMAIN" } ] ] },
				"AliasTarget" : {
					"HostedZoneId" : { "Fn::GetAtt" : [ "KafkaElasticLoadBalancer", "CanonicalHostedZoneNameID" ] }, 
					"DNSName" : { "Fn::GetAtt" : [ "KafkaElasticLoadBalancer", "DNSName" ] }
				},
				"Type" : "A"
			}
		},
		"OpenVPNPublicName" : {
			"Type" : "AWS::Route53::RecordSet",
			"Condition" : "openVPNInstanceCreation",
			"Properties" : {
				"Type" : "A",
				"HostedZoneId" : { "Ref" : "PublicHostedZone" }, 
				"Name" : { "Fn::Join" : [ "", [ "openvpn.", { "Ref" : "CDOMAIN" } ] ] }, 
				"ResourceRecords" : [ { "Fn::GetAtt" : [ "openVPNInstance", "PublicIp" ] } ], 
				"TTL" : "300"
			}
		},
		"OpenVPNPrivateName" : {
			"Type" : "AWS::Route53::RecordSet",
			"Condition" : "openVPNInstanceCreation",
			"Properties" : {
				"Type" : "A",
				"HostedZoneId" : { "Ref" : "PrivateHostedZone" }, 
				"Name" : { "Fn::Join" : [ "", [ "openvpn.", { "Ref" : "CDOMAIN" } ] ] }, 
				"ResourceRecords" : [ { "Fn::GetAtt" : [ "openVPNInstance", "PrivateIp" ] } ], 
				"TTL" : "300"
			}
		},
		"WebElasticLoadBalancer" : {
			"Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties" : {
				"CrossZone" : "true",
				"SecurityGroups" : [ { "Ref" : "WebLoadBalancerSecurityGroup" } ], 
				"Subnets" : [ { "Ref" : "PublicSubnet" } ],
				"ConnectionDrainingPolicy" : {
					"Enabled" : "true",
					"Timeout" : "30"
				},
				"Listeners" : [ {
					"LoadBalancerPort" : "443",
					"InstancePort" : "7979",
					"Protocol" : "HTTPS",
					"InstanceProtocol" : "HTTP",
					"SSLCertificateId" : { "Fn::Join" : [ "", [ "arn:aws:iam::", { "Ref" : "AWS::AccountId" }, 
						":server-certificate/", { "Ref" : "WebSSLCertificateName" } ] ] }
				}, {
					"LoadBalancerPort" : "80",
					"InstancePort" : "80", 
					"Protocol" : "HTTP", 
					"InstanceProtocol" : "HTTP"
				} ],
				"HealthCheck" : {
					"Target" : "HTTP:7979/users/login",
					"HealthyThreshold" : "3",
					"UnhealthyThreshold" : "5",
					"Interval" : "30",
					"Timeout" : "25"
				}
			}
		},
		"DataElasticLoadBalancer" : {
			"Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties" : {
				"CrossZone" : "true",
				"SecurityGroups" : [ { "Ref" : "WebLoadBalancerSecurityGroup" } ], 
				"Subnets" : [ { "Ref" : "PublicSubnet" } ],
				"ConnectionDrainingPolicy" : {
					"Enabled" : "true",
					"Timeout" : "30"
				},
				"Listeners" : [ {
					"LoadBalancerPort" : "443",
					"InstancePort" : "7980",
					"Protocol" : "SSL",
					"InstanceProtocol" : "TCP",
					"SSLCertificateId" : { "Fn::Join" : [ "", [ "arn:aws:iam::", { "Ref" : "AWS::AccountId" }, 
						":server-certificate/", { "Ref" : "DataSSLCertificateName" } ] ] }
				} ],
				"HealthCheck" : {
					"Target" : "TCP:7980",
					"HealthyThreshold" : "3",
					"UnhealthyThreshold" : "5",
					"Interval" : "30",
					"Timeout" : "25"
				}
			}
		},
		"CoreElasticLoadBalancer" : {
			"Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
			"Condition" : "InternalLoadBalancerCreation",
			"Properties" : {
				"CrossZone" : "true",
				"SecurityGroups" : [ { "Ref" : "WebLoadBalancerSecurityGroup" } ], 
				"Subnets" : [ { "Ref" : "PublicSubnet" } ],
				"Scheme" : "internal",
				"ConnectionDrainingPolicy" : {
					"Enabled" : "true",
					"Timeout" : "30"
				},
				"Listeners" : [ {
					"LoadBalancerPort" : "443",
					"InstancePort" : "7979",
					"Protocol" : "HTTPS",
					"InstanceProtocol" : "HTTP",
					"SSLCertificateId" : { "Fn::Join" : [ "", [ "arn:aws:iam::", { "Ref" : "AWS::AccountId" }, 
						":server-certificate/", { "Ref" : "WebSSLCertificateName" } ] ] }
				} ],
				"HealthCheck" : {
					"Target" : "TCP:7979",
					"HealthyThreshold" : "3",
					"UnhealthyThreshold" : "5",
					"Interval" : "30",
					"Timeout" : "25"
				}
			}
		},
		"KafkaElasticLoadBalancer" : {
			"Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
			"Condition" : "InternalLoadBalancerCreation",
			"Properties" : {
				"CrossZone" : "true",
				"SecurityGroups" : [ { "Ref" : "KafkaLoadBalancerSecurityGroup" } ], 
				"Subnets" : [ { "Ref" : "PublicSubnet" } ],
				"Scheme" : "internal",
				"ConnectionDrainingPolicy" : {
					"Enabled" : "true",
					"Timeout" : "30"
				},
				"Listeners" : [ {
					"LoadBalancerPort" : "9092",
					"InstancePort" : "9092",
					"Protocol" : "TCP",
					"InstanceProtocol" : "TCP"
				} ],
				"HealthCheck" : {
					"Target" : "TCP:9092",
					"HealthyThreshold" : "3",
					"UnhealthyThreshold" : "5",
					"Interval" : "30",
					"Timeout" : "25"
				}
			}
		},
		
		"corezkGroup" : {
			"Type" : "AWS::AutoScaling::AutoScalingGroup",
			"DependsOn" : "AttachGateway",
			"Properties" : {
				"VPCZoneIdentifier" : [ { "Ref" : "PublicSubnet" } ],
				"LaunchConfigurationName" : { "Ref" : "corezkLaunch" },
				"LoadBalancerNames" : { "Fn::If" : [ "InternalLoadBalancerCreation", [ { "Ref" : "CoreElasticLoadBalancer" } ], { "Ref" : "AWS::NoValue" } ] },
				"MinSize" : { "Ref" : "MinCorezkInstances" },
				"MaxSize" : "10",
				"NotificationConfiguration" : {
					"TopicARN" : { "Ref" : "SNSNotificationTopic" },
          			"NotificationTypes" : [ "autoscaling:EC2_INSTANCE_TERMINATE",
                                  			"autoscaling:EC2_INSTANCE_TERMINATE_ERROR" ]
        			
      			},
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "corezk",
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" },
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Name", 
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - corezk" ] ] },
					"PropagateAtLaunch" : "true"
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : { "Ref" : "MinCorezkInstances" },
					"Timeout" : "PT200M"
				}
			}
		},
		"corezkLaunch" : {
			"Type" : "AWS::AutoScaling::LaunchConfiguration",
			"Properties" : {
				"AssociatePublicIpAddress" : "true",
				"ImageId" : { "Ref" : "AMI" },
				"SecurityGroups" : [ { "Ref" : "redBorderPublicSecurityGroup" } ],
				"KeyName"        : { "Ref" : "KeyName" },
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "corezk", { "Ref" : "InstanceSize" } ] },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"InstanceMonitoring" : "true", 
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "50",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
						"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
						"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=corezk\n",
					"MODULES=\"flow:true location:true ips:true monitor:true malware:false social:true\"\n",
					"NODESERVICES=\"rb-cloudwatch:1\"\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n", 
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n", 
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=corezkGroup\n",
					"LOGWATCHG=", { "Ref" : "AWS::StackName" }, "\n",
					"SQSQUEUEURL=", { "Ref" : "SQSQueue" }, "\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n", 
					"S3BUCKET=", { "Ref" : "S3Bucket" }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"S3TYPE=aws\n",
					"CLOUDDNS=1\n",
					{ "Fn::If" : [ "InternalLoadBalancerCreation",  "LBINTERNAL=1\n", "LBINTERNAL=0\n" ] },
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"CHEF_AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKeyChef" }, "\"\n",
					"CHEF_AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKeyChef", "SecretAccessKey" ] }, "\"\n",
					{ "Fn::If" : [ "ElasticacheCreation", { "Fn::Join" : [ "", [ 
						"ELASTICCACHECLUSTERID=", { "Ref" : "Memcached" }, "\n",
						"ELASTICCACHEENDPOINT=", { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "Memcached", "ConfigurationEndpoint.Address" ] },
						":", { "Fn::GetAtt" : [ "Memcached", "ConfigurationEndpoint.Port" ] } ] ] }, "\n"
						] ] },
					"" ] },
					{ "Fn::If" : [ "RDSCreation", { "Fn::Join" : [ "", [ 
						"SQLUSER=rdsredborder\n",
						"SQLPASSWORD=", { "Ref" : "DBPassword" }, "\n",
						"SQLDB=redborderRDS\n", 
						"SQLHOST=", { "Fn::Join" : [ "", [ { "Fn::GetAtt" : [ "DBRDS", "Endpoint.Address" ] }, ":", 
							{ "Fn::GetAtt" : [ "DBRDS", "Endpoint.Port" ] } ] ] }, "\n"
						] ] }, 
					"" ] },
					"ENRICHMODE=samza\n",
					"MMDOWNALARMNAME=\"", { "Ref" : "middlemanagerLowCapacityAlarm" }, "\"\n",
					"CMDFINISH='rb_druid_rules.rb -t _default -p pt1d -r 2 -d forever -i 1'",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"cloudwatch\" : \"true\"\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } }
			}
		},

		"kafkaGroup" : {
			"Type" : "AWS::AutoScaling::AutoScalingGroup",
			"Condition" : "kafkaRoleCreation",
			"DependsOn" : "corezkGroup",
			"Properties" : {
				"VPCZoneIdentifier" : [ { "Ref" : "PublicSubnet" } ],
				"LaunchConfigurationName" : { "Ref" : "kafkaLaunch" },
				"LoadBalancerNames" : { "Fn::If" : [ "InternalLoadBalancerCreation", [ { "Ref" : "KafkaElasticLoadBalancer" } ], { "Ref" : "AWS::NoValue" } ] },
				"MinSize" : { "Ref" : "MinKafkaInstances" },
				"MaxSize" : "10",
				"NotificationConfiguration" : {
					"TopicARN" : { "Ref" : "SNSNotificationTopic" },
          			"NotificationTypes" : [ "autoscaling:EC2_INSTANCE_TERMINATE",
                                  			"autoscaling:EC2_INSTANCE_TERMINATE_ERROR" ]
      			},
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "kafka",
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" },
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Name", 
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - kafka" ] ] },
					"PropagateAtLaunch" : "true"
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : { "Ref" : "MinKafkaInstances" }, 
					"Timeout" : "PT200M"
				}
			}
		},
		"kafkaLaunch" : {
			"Type" : "AWS::AutoScaling::LaunchConfiguration",
			"Condition" : "kafkaRoleCreation",
			"Properties" : {
				"AssociatePublicIpAddress" : "true",
				"ImageId" : { "Ref" : "AMI" },
				"SecurityGroups" : [ { "Ref" : "redBorderPublicSecurityGroup" } ],
				"KeyName"        : { "Ref" : "KeyName" },
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "kafka", { "Ref" : "InstanceSize" } ] },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"InstanceMonitoring" : "true", 
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "50",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
						"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
						"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=kafka\n",
					"#NODESERVICES=\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n", 
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n", 
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=kafkaGroup\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n", 
					"S3BUCKET=", { "Ref" : "S3Bucket" }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"S3TYPE=aws\n",
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"cloudwatch\" : \"true\"\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } }
			}
		},

		"http2kGroup" : {
			"Type" : "AWS::AutoScaling::AutoScalingGroup",
			"Condition" : "http2kRoleCreation",
			"DependsOn" : "kafkaGroup",
			"Properties" : {
				"VPCZoneIdentifier" : [ { "Ref" : "PublicSubnet" } ],
				"LoadBalancerNames" : [ { "Ref" : "DataElasticLoadBalancer" } ],
				"LaunchConfigurationName" : { "Ref" : "http2kLaunch" },
				"MinSize" : { "Ref" : "MinHttp2kInstances" },
				"MaxSize" : "10",
				"NotificationConfiguration" : {
					"TopicARN" : { "Ref" : "SNSNotificationTopic" },
          			"NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
                        					"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                  			"autoscaling:EC2_INSTANCE_TERMINATE",
                                  			"autoscaling:EC2_INSTANCE_TERMINATE_ERROR" ]
        			
      			},
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "http2k",
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" },
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Name", 
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - http2k" ] ] },
					"PropagateAtLaunch" : "true"
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : { "Ref" : "MinHttp2kInstances" },
					"Timeout" : "PT200M"
				}
			}
		},
		"http2kLaunch" : {
			"Type" : "AWS::AutoScaling::LaunchConfiguration",
			"Condition" : "http2kRoleCreation",
			"Properties" : {
				"AssociatePublicIpAddress" : "true",
				"ImageId" : { "Ref" : "AMI" },
				"SecurityGroups" : [ { "Ref" : "redBorderPublicSecurityGroup" } ],
				"KeyName"        : { "Ref" : "KeyName" },
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "http2k", { "Ref" : "InstanceSize" } ] },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"InstanceMonitoring" : "true",
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "50",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
						"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
						"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=http2k\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n", 
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n", 
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=http2kGroup\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n", 
					"S3BUCKET=", { "Ref" : "S3Bucket" }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"S3TYPE=aws\n",
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"cloudwatch\" : \"true\",\n",
					"      \"autoscaled\" : \"true\"\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } }
			}
		},
		"http2kLifecycleHook" : {
			"Type" : "AWS::AutoScaling::LifecycleHook",
			"Condition" : "http2kRoleCreation",
			"Properties" : {
				"AutoScalingGroupName" : { "Ref" : "http2kGroup"  },
				"LifecycleTransition" : "autoscaling:EC2_INSTANCE_TERMINATING",
				"NotificationTargetARN" : { "Fn::GetAtt" : [ "SQSQueue", "Arn" ] }, 
				"RoleARN" : { "Fn::GetAtt" : [ "IAMRoleLifecycleHook", "Arn" ] }
			}
		},
		"http2kHighCPUAlarm" : {
			"Type" : "AWS::CloudWatch::Alarm",
			"Condition" : "http2kRoleCreation",
			"Properties" : {
				"AlarmName" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " - http2kHighCPUAlarm" ] ] },
				"AlarmDescription" : "Alarm for web autoscaling. When CPU is so high, triggers a scaling out",
				"Namespace" : "AWS/EC2",
				"MetricName" : "CPUUtilization",
				"Dimensions" : [ {
					"Name" : "AutoScalingGroupName",
					"Value" : { "Ref" : "http2kGroup" }
				} ], 
				"EvaluationPeriods" : "1",
				"Period" : "300",
				"ComparisonOperator" : "GreaterThanThreshold",
				"Threshold" : "70",
				"Statistic" : "Average",
				"ActionsEnabled" : "true",
				"AlarmActions" : [ { "Ref" : "http2kScaleUpPolicy" } ]
			}
		},
		"http2kScaleUpPolicy" : {
			"Type" : "AWS::AutoScaling::ScalingPolicy",
			"Condition" : "http2kRoleCreation",
			"Properties" : {
				"AdjustmentType" : "ChangeInCapacity",
				"AutoScalingGroupName" : { "Ref" : "http2kGroup" },
				"Cooldown" : "900",
				"ScalingAdjustment" : "1"
			}
		},
		"http2kLowCPUAlarm" : {
			"Type" : "AWS::CloudWatch::Alarm",
			"Condition" : "http2kRoleCreation",
			"Properties" : {
				"AlarmName" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " - http2kLowCPUAlarm" ] ] },
				"AlarmDescription" : "Alarm for web autoscaling. When CPU is so low, triggers a scaling in",
				"Namespace" : "AWS/EC2",
				"MetricName" : "CPUUtilization",
				"Dimensions" : [ {
					"Name" : "AutoScalingGroupName",
					"Value" : { "Ref" : "http2kGroup" }
				} ], 
				"EvaluationPeriods" : "3",
				"Period" : "300",
				"ComparisonOperator" : "LessThanThreshold",
				"Threshold" : "35",
				"Statistic" : "Average",
				"ActionsEnabled" : "true",
				"AlarmActions" : [ { "Ref" : "http2kScaleDownPolicy" } ]
			}
		},
		"http2kScaleDownPolicy" : {
			"Type" : "AWS::AutoScaling::ScalingPolicy",
			"Condition" : "http2kRoleCreation",
			"Properties" : {
				"AdjustmentType" : "ChangeInCapacity",
				"AutoScalingGroupName" : { "Ref" : "http2kGroup" },
				"Cooldown" : "300",
				"ScalingAdjustment" : "-1"
			}
		},
		"webGroup" : {
			"Type" : "AWS::AutoScaling::AutoScalingGroup",
			"Condition" : "webRoleCreation",
			"DependsOn" : "kafkaGroup",
			"Properties" : {
				"VPCZoneIdentifier" : [ { "Ref" : "PublicSubnet" } ],
				"LaunchConfigurationName" : { "Ref" : "webLaunch" },
				"LoadBalancerNames" : [ { "Ref" : "WebElasticLoadBalancer" } ],
				"MinSize" : { "Ref" : "MinWebInstances" },
				"MaxSize" : "10",
				"NotificationConfiguration" : {
					"TopicARN" : { "Ref" : "SNSNotificationTopic" },
          			"NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
                        					"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                  			"autoscaling:EC2_INSTANCE_TERMINATE",
                                  			"autoscaling:EC2_INSTANCE_TERMINATE_ERROR" ]        			
      			},
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "web",
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" },
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Name", 
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - web" ] ] },
					"PropagateAtLaunch" : "true"
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : { "Ref" : "MinWebInstances" },
					"Timeout" : "PT200M"
				}
			}
		},
		"webLaunch" : {
			"Type" : "AWS::AutoScaling::LaunchConfiguration",
			"Condition" : "webRoleCreation",
			"Properties" : {
				"AssociatePublicIpAddress" : "true",
				"ImageId" : { "Ref" : "AMI" },
				"SecurityGroups" : [ { "Ref" : "redBorderPublicSecurityGroup" } ],
				"KeyName"        : { "Ref" : "KeyName" },
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "web", { "Ref" : "InstanceSize" } ] },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"InstanceMonitoring" : "true",
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "20",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
						"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
						"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=web\n",
					"#NODESERVICES=\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n", 
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n", 
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=webGroup\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n", 
					"S3BUCKET=", { "Ref" : "S3Bucket" }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"S3TYPE=aws\n",
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"autoscaled\" : \"true\",\n",
					"      \"cloudwatch\" : \"true\"\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } }
			}
		},
		"webLifecycleHook" : {
			"Type" : "AWS::AutoScaling::LifecycleHook",
			"Condition" : "webRoleCreation",
			"Properties" : {
				"AutoScalingGroupName" : { "Ref" : "webGroup"  },
				"LifecycleTransition" : "autoscaling:EC2_INSTANCE_TERMINATING",
				"NotificationTargetARN" : { "Fn::GetAtt" : [ "SQSQueue", "Arn" ] }, 
				"RoleARN" : { "Fn::GetAtt" : [ "IAMRoleLifecycleHook", "Arn" ] }
			}
		},
		"webHighCPUAlarm" : {
			"Type" : "AWS::CloudWatch::Alarm",
			"Condition" : "webRoleCreation",
			"Properties" : {
				"AlarmName" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " - webHighCPUAlarm" ] ] },
				"AlarmDescription" : "Alarm for web autoscaling. When CPU is so high, triggers a scaling out",
				"Namespace" : "AWS/EC2",
				"MetricName" : "CPUUtilization",
				"Dimensions" : [ {
					"Name" : "AutoScalingGroupName",
					"Value" : { "Ref" : "webGroup" }
				} ], 
				"EvaluationPeriods" : "1",
				"Period" : "300",
				"ComparisonOperator" : "GreaterThanThreshold",
				"Threshold" : "65",
				"Statistic" : "Average",
				"ActionsEnabled" : "true",
				"AlarmActions" : [ { "Ref" : "webScaleUpPolicy" } ]
			}
		},
		"webScaleUpPolicy" : {
			"Type" : "AWS::AutoScaling::ScalingPolicy",
			"Condition" : "webRoleCreation",
			"Properties" : {
				"AdjustmentType" : "ChangeInCapacity",
				"AutoScalingGroupName" : { "Ref" : "webGroup" },
				"Cooldown" : "900",
				"ScalingAdjustment" : "1"
			}
		},
		"webLowCPUAlarm" : {
			"Type" : "AWS::CloudWatch::Alarm",
			"Condition" : "webRoleCreation",
			"Properties" : {
				"AlarmName" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " - webLowCPUAlarm" ] ] },
				"AlarmDescription" : "Alarm for web autoscaling. When CPU is so low, triggers a scaling in",
				"Namespace" : "AWS/EC2",
				"MetricName" : "CPUUtilization",
				"Dimensions" : [ {
					"Name" : "AutoScalingGroupName",
					"Value" : { "Ref" : "webGroup" }
				} ], 
				"EvaluationPeriods" : "3",
				"Period" : "300",
				"ComparisonOperator" : "LessThanThreshold",
				"Threshold" : "40",
				"Statistic" : "Average",
				"ActionsEnabled" : "true",
				"AlarmActions" : [ { "Ref" : "webScaleDownPolicy" } ]
			}
		},
		"webScaleDownPolicy" : {
			"Type" : "AWS::AutoScaling::ScalingPolicy",
			"Condition" : "webRoleCreation",
			"Properties" : {
				"AdjustmentType" : "ChangeInCapacity",
				"AutoScalingGroupName" : { "Ref" : "webGroup" },
				"Cooldown" : "300",
				"ScalingAdjustment" : "-1"
			}
		},

		"brokerGroup" : {
			"Type" : "AWS::AutoScaling::AutoScalingGroup",
			"Condition" : "brokerRoleCreation",
			"DependsOn" : "kafkaGroup",
			"Properties" : {
				"VPCZoneIdentifier" : [ { "Ref" : "PublicSubnet" } ],
				"LaunchConfigurationName" : { "Ref" : "brokerLaunch" },
				"MinSize" : { "Ref" : "MinBrokerInstances" },
				"MaxSize" : "10",
				"NotificationConfiguration" : {
					"TopicARN" : { "Ref" : "SNSNotificationTopic" },
          			"NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
                        					"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                  			"autoscaling:EC2_INSTANCE_TERMINATE",
                                  			"autoscaling:EC2_INSTANCE_TERMINATE_ERROR" ]
      			},
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "broker",
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" },
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Name", 
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - broker" ] ] },
					"PropagateAtLaunch" : "true"
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : { "Ref" : "MinBrokerInstances" }, 
					"Timeout" : "PT200M"
				}
			}
		},
		"brokerLaunch" : {
			"Type" : "AWS::AutoScaling::LaunchConfiguration",
			"Condition" : "brokerRoleCreation",
			"Properties" : {
				"AssociatePublicIpAddress" : "true",
				"ImageId" : { "Ref" : "AMI" },
				"SecurityGroups" : [ { "Ref" : "redBorderPublicSecurityGroup" } ],
				"KeyName"        : { "Ref" : "KeyName" },
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "broker", { "Ref" : "InstanceSize" } ] },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"InstanceMonitoring" : "true", 
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "50",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
						"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
						"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=broker\n",
					"#NODESERVICES=\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n", 
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n", 
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=brokerGroup\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n", 
					"S3BUCKET=", { "Ref" : "S3Bucket" }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"S3TYPE=aws\n",
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"autoscaled\" : \"true\",\n",
					"      \"cloudwatch\" : \"true\"\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } }
			}
		},
		"brokerLifecycleHook" : {
			"Type" : "AWS::AutoScaling::LifecycleHook",
			"Condition" : "brokerRoleCreation",
			"Properties" : {
				"AutoScalingGroupName" : { "Ref" : "brokerGroup"  },
				"LifecycleTransition" : "autoscaling:EC2_INSTANCE_TERMINATING",
				"NotificationTargetARN" : { "Fn::GetAtt" : [ "SQSQueue", "Arn" ] }, 
				"RoleARN" : { "Fn::GetAtt" : [ "IAMRoleLifecycleHook", "Arn" ] }
			}
		},
		"brokerHighCPUAlarm" : {
			"Type" : "AWS::CloudWatch::Alarm",
			"Condition" : "brokerRoleCreation",
			"Properties" : {
				"AlarmName" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " - brokerHighCPUAlarm" ] ] },
				"AlarmDescription" : "Alarm for web autoscaling. When CPU is so high, triggers a scaling out",
				"Namespace" : "AWS/EC2",
				"MetricName" : "CPUUtilization",
				"Dimensions" : [ {
					"Name" : "AutoScalingGroupName",
					"Value" : { "Ref" : "brokerGroup" }
				} ], 
				"EvaluationPeriods" : "1",
				"Period" : "300",
				"ComparisonOperator" : "GreaterThanThreshold",
				"Threshold" : "65",
				"Statistic" : "Average",
				"ActionsEnabled" : "true",
				"AlarmActions" : [ { "Ref" : "brokerScaleUpPolicy" } ]
			}
		},		
		"brokerLowCPUAlarm" : {
			"Type" : "AWS::CloudWatch::Alarm",
			"Condition" : "brokerRoleCreation",
			"Properties" : {
				"AlarmName" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " - brokerLowCPUAlarm" ] ] },
				"AlarmDescription" : "Alarm for web autoscaling. When CPU is so low, triggers a scaling in",
				"Namespace" : "AWS/EC2",
				"MetricName" : "CPUUtilization",
				"Dimensions" : [ {
					"Name" : "AutoScalingGroupName",
					"Value" : { "Ref" : "brokerGroup" }
				} ], 
				"EvaluationPeriods" : "3",
				"Period" : "300",
				"ComparisonOperator" : "LessThanThreshold",
				"Threshold" : "40",
				"Statistic" : "Average",
				"ActionsEnabled" : "true",
				"AlarmActions" : [ { "Ref" : "brokerScaleDownPolicy" } ]
			}
		},
		"brokerHighRAMAlarm" : {
			"Type" : "AWS::CloudWatch::Alarm",
			"Condition" : "brokerRoleCreation",
			"Properties" : {
				"AlarmName" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " - brokerHighRAMAlarm" ] ] },
				"AlarmDescription" : "Alarm for web autoscaling. When RAM is so high, triggers a scaling out",
				"Namespace" : "System/Linux",
				"MetricName" : "MemoryUtilization",
				"Dimensions" : [ {
					"Name" : "AutoScalingGroupName",
					"Value" : { "Ref" : "brokerGroup" }
				} ], 
				"EvaluationPeriods" : "1",
				"Period" : "300",
				"ComparisonOperator" : "GreaterThanThreshold",
				"Threshold" : "85",
				"Statistic" : "Average",
				"ActionsEnabled" : "true",
				"AlarmActions" : [ { "Ref" : "brokerScaleUpPolicy" } ]
			}
		},		
		"brokerLowRAMAlarm" : {
			"Type" : "AWS::CloudWatch::Alarm",
			"Condition" : "brokerRoleCreation",
			"Properties" : {
				"AlarmName" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " - brokerLowRAMAlarm" ] ] },
				"AlarmDescription" : "Alarm for web autoscaling. When CPU is so low, triggers a scaling in",
				"Namespace" : "System/Linux",
				"MetricName" : "MemoryUtilization",
				"Dimensions" : [ {
					"Name" : "AutoScalingGroupName",
					"Value" : { "Ref" : "brokerGroup" }
				} ], 
				"EvaluationPeriods" : "3",
				"Period" : "300",
				"ComparisonOperator" : "LessThanThreshold",
				"Threshold" : "40",
				"Statistic" : "Average",
				"ActionsEnabled" : "true",
				"AlarmActions" : [ { "Ref" : "brokerScaleDownPolicy" } ]
			}
		},
		"brokerScaleUpPolicy" : {
			"Type" : "AWS::AutoScaling::ScalingPolicy",
			"Condition" : "brokerRoleCreation",
			"Properties" : {
				"AdjustmentType" : "ChangeInCapacity",
				"AutoScalingGroupName" : { "Ref" : "brokerGroup" },
				"Cooldown" : "900",
				"ScalingAdjustment" : "1"
			}
		},
		"brokerScaleDownPolicy" : {
			"Type" : "AWS::AutoScaling::ScalingPolicy",
			"Condition" : "brokerRoleCreation",
			"Properties" : {
				"AdjustmentType" : "ChangeInCapacity",
				"AutoScalingGroupName" : { "Ref" : "brokerGroup" },
				"Cooldown" : "300",
				"ScalingAdjustment" : "-1"
			}
		},

		"middlemanagerGroup" : {
			"Type" : "AWS::AutoScaling::AutoScalingGroup",
			"Condition" : "middlemanagerRoleCreation",
			"DependsOn" : "kafkaGroup",
			"Properties" : {
				"VPCZoneIdentifier" : [ { "Ref" : "PublicSubnet" } ],
				"LaunchConfigurationName" : { "Ref" : "middlemanagerLaunch" },
				"MinSize" : { "Ref" : "MinMiddlemanagerInstances" },
				"MaxSize" : "10",
				"NotificationConfiguration" : {
					"TopicARN" : { "Ref" : "SNSNotificationTopic" },
          			"NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
                        					"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                  			"autoscaling:EC2_INSTANCE_TERMINATE",
                                  			"autoscaling:EC2_INSTANCE_TERMINATE_ERROR" ]        			
      			},
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "middlemanager",
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" },
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Name", 
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - middlemanager" ] ] },
					"PropagateAtLaunch" : "true"
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : { "Ref" : "MinMiddlemanagerInstances" },
					"Timeout" : "PT200M"
				}
			}
		},
		"middlemanagerLaunch" : {
			"Type" : "AWS::AutoScaling::LaunchConfiguration",
			"Condition" : "middlemanagerRoleCreation",
			"Properties" : {
				"AssociatePublicIpAddress" : "true",
				"ImageId" : { "Ref" : "AMI" },
				"SecurityGroups" : [ { "Ref" : "redBorderPublicSecurityGroup" } ],
				"KeyName"        : { "Ref" : "KeyName" },
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "middlemanager", { "Ref" : "InstanceSize" } ] },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"InstanceMonitoring" : "true", 
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "50",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
						"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
						"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=middleManager\n",
					"#NODESERVICES=\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n", 
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n", 
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=middlemanagerGroup\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n", 
					"S3BUCKET=", { "Ref" : "S3Bucket" }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"S3TYPE=aws\n",
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"cloudwatch\" : \"true\",\n",
					"      \"autoscaled\" : \"true\"\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } }
			}
		},
		"middleManagerLifecycleHook" : {
			"Type" : "AWS::AutoScaling::LifecycleHook",
			"Condition" : "middlemanagerRoleCreation",
			"Properties" : {
				"AutoScalingGroupName" : { "Ref" : "middlemanagerGroup"  },
				"LifecycleTransition" : "autoscaling:EC2_INSTANCE_TERMINATING",
				"NotificationTargetARN" : { "Fn::GetAtt" : [ "SQSQueue", "Arn" ] },
				"HeartbeatTimeout" : "7200",
				"RoleARN" : { "Fn::GetAtt" : [ "IAMRoleLifecycleHook", "Arn" ] }
			}
		},
		"middlemanagerHighCapacityAlarm" : {
			"Type" : "AWS::CloudWatch::Alarm",
			"Condition" : "middlemanagerRoleCreation",
			"Properties" : {
				"AlarmName" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " - middlemanagerHighCapacityAlarm" ] ] },
				"AlarmDescription" : "Alarm for middleManager autoscaling. When capacity is so high, triggers a scaling out",
				"Namespace" : { "Fn::Join" : [ "", [ "rB/", { "Ref" : "AWS::StackName" } ] ] },
				"MetricName" : "desired_capacity",
				"Dimensions" : [ {
					"Name" : "InstanceId",
					"Value" : "overlord"
				} ], 
				"EvaluationPeriods" : "1",
				"Period" : "60",
				"ComparisonOperator" : "GreaterThanOrEqualToThreshold",
				"Threshold" : "60",
				"Statistic" : "Average",
				"ActionsEnabled" : "true",
				"AlarmActions" : [ { "Ref" : "middleManagerScaleUpPolicy" } ]
			}
		},
		"middlemanagerPendingTasksAlarm" : {
			"Type" : "AWS::CloudWatch::Alarm",
			"Condition" : "middlemanagerRoleCreation",
			"Properties" : {
				"AlarmName" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " - middlemanagerPendingTasksAlarm" ] ] },
				"AlarmDescription" : "Alarm for middleManager autoscaling. When capacity is so high, triggers a scaling out",
				"Namespace" : { "Fn::Join" : [ "", [ "rB/", { "Ref" : "AWS::StackName" } ] ] },
				"MetricName" : "pending_tasks",
				"Dimensions" : [ {
					"Name" : "InstanceId",
					"Value" : "overlord"
				} ], 
				"EvaluationPeriods" : "1",
				"Period" : "300",
				"ComparisonOperator" : "GreaterThanOrEqualToThreshold",
				"Threshold" : "1",
				"Statistic" : "Average",
				"ActionsEnabled" : "true",
				"AlarmActions" : [ { "Ref" : "SNSNotificationTopic" } ]
			}
		},
		"middleManagerScaleUpPolicy" : {
			"Type" : "AWS::AutoScaling::ScalingPolicy",
			"Condition" : "middlemanagerRoleCreation",
			"Properties" : {
				"AdjustmentType" : "ChangeInCapacity",
				"AutoScalingGroupName" : { "Ref" : "middlemanagerGroup" },
				"Cooldown" : "900",
				"ScalingAdjustment" : "1"
			}
		}, 
		"middlemanagerLowCapacityAlarm" : {
			"Type" : "AWS::CloudWatch::Alarm",
			"Condition" : "middlemanagerRoleCreation",
			"Properties" : {
				"AlarmName" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " - middlemanagerLowCapacityAlarm" ] ] },
				"AlarmDescription" : "Alarm for middleManager autoscaling. When capacity is so low, triggers a scaling in",
				"Namespace" : { "Fn::Join" : [ "", [ "rB/", { "Ref" : "AWS::StackName" } ] ] },
				"MetricName" : "desired_capacity",
				"Dimensions" : [ {
					"Name" : "InstanceId",
					"Value" : "overlord"
				} ], 
				"EvaluationPeriods" : "10",
				"Period" : "60",
				"ComparisonOperator" : "LessThanOrEqualToThreshold",
				"Threshold" : "40",
				"Statistic" : "Average",
				"AlarmActions" : [ { "Ref" : "SNSManagementTopic" } ]
			}
		},

		"historicalGroup" : {
			"Type" : "AWS::AutoScaling::AutoScalingGroup",
			"Condition" : "historicalRoleCreation",
			"DependsOn" : "kafkaGroup",
			"Properties" : {
				"VPCZoneIdentifier" : [ { "Ref" : "PublicSubnet" } ],
				"LaunchConfigurationName" : { "Ref" : "historicalLaunch" },
				"MinSize" : { "Ref" : "MinHistoricalInstances" },
				"MaxSize" : "10",
				"NotificationConfiguration" : {
					"TopicARN" : { "Ref" : "SNSNotificationTopic" },
          			"NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
                        					"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                  			"autoscaling:EC2_INSTANCE_TERMINATE",
                                  			"autoscaling:EC2_INSTANCE_TERMINATE_ERROR" ]        			
      			},
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "historical",
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" },
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Name", 
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - historical" ] ] },
					"PropagateAtLaunch" : "true"
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : { "Ref" : "MinHistoricalInstances" },
					"Timeout" : "PT200M"
				}
			}
		},
		"historicalLaunch" : {
			"Type" : "AWS::AutoScaling::LaunchConfiguration",
			"Condition" : "historicalRoleCreation",
			"Properties" : {
				"AssociatePublicIpAddress" : "true",
				"ImageId" : { "Ref" : "AMI" },
				"SecurityGroups" : [ { "Ref" : "redBorderPublicSecurityGroup" } ],
				"KeyName"        : { "Ref" : "KeyName" },
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "historical", { "Ref" : "InstanceSize" } ] },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"InstanceMonitoring" : "true", 
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "500",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
						"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
						"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=historical\n",
					"#NODESERVICES=\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n", 
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n", 
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=historicalGroup\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n", 
					"S3BUCKET=", { "Ref" : "S3Bucket" }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"S3TYPE=aws\n",
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"cloudwatch\" : \"true\",\n",
					"      \"autoscaled\" : \"true\"\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } }
			}
		},
		"historicalLifecycleHook" : {
			"Type" : "AWS::AutoScaling::LifecycleHook",
			"Condition" : "historicalRoleCreation",
			"Properties" : {
				"AutoScalingGroupName" : { "Ref" : "historicalGroup"  },
				"LifecycleTransition" : "autoscaling:EC2_INSTANCE_TERMINATING",
				"NotificationTargetARN" : { "Fn::GetAtt" : [ "SQSQueue", "Arn" ] },
				"HeartbeatTimeout" : "7200",
				"RoleARN" : { "Fn::GetAtt" : [ "IAMRoleLifecycleHook", "Arn" ] }
			}
		},
		"historicalHighCapacityAlarm" : {
			"Type" : "AWS::CloudWatch::Alarm",
			"Condition" : "historicalRoleCreation",
			"Properties" : {
				"AlarmName" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " - historicalHighCapacityAlarm" ] ] },
				"AlarmDescription" : "Alarm for historical hot autoscaling. When capacity is so high, triggers a scaling out",
				"Namespace" : { "Fn::Join" : [ "", [ "rB/", { "Ref" : "AWS::StackName" } ] ] },
				"MetricName" : "default_tier_capacity",
				"Dimensions" : [ {
					"Name" : "InstanceId",
					"Value" : "coordinator"
				} ], 
				"EvaluationPeriods" : "1",
				"Period" : "300",
				"ComparisonOperator" : "GreaterThanThreshold",
				"Threshold" : "80",
				"Statistic" : "Average",
				"ActionsEnabled" : "true",
				"AlarmActions" : [ { "Ref" : "historicalScaleUpPolicy" } ]
			}
		},
		"historicalLowCapacityAlarm" : {
			"Type" : "AWS::CloudWatch::Alarm",
			"Condition" : "historicalRoleCreation",
			"Properties" : {
				"AlarmName" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " - historicalLowCapacityAlarm" ] ] },
				"AlarmDescription" : "Alarm for historical hot  autoscaling. When disk usage is so low, triggers a scaling in",
				"Namespace" : { "Fn::Join" : [ "", [ "rB/", { "Ref" : "AWS::StackName" } ] ] },
				"MetricName" : "default_tier_capacity",
				"Dimensions" : [ {
					"Name" : "InstanceId",
					"Value" : "coordinator"
				} ],
				"EvaluationPeriods" : "3",
				"Period" : "300",
				"ComparisonOperator" : "LessThanThreshold",
				"Threshold" : "40",
				"Statistic" : "Average",
				"ActionsEnabled" : "true",
				"AlarmActions" : [ { "Ref" : "historicalScaleDownPolicy" } ]
			}
		},
		"historicalScaleUpPolicy" : {
			"Type" : "AWS::AutoScaling::ScalingPolicy",
			"Condition" : "historicalRoleCreation",
			"Properties" : {
				"AdjustmentType" : "ChangeInCapacity",
				"AutoScalingGroupName" : { "Ref" : "historicalGroup" },
				"Cooldown" : "900",
				"ScalingAdjustment" : "1"
			}
		}, 
		"historicalScaleDownPolicy" : {
			"Type" : "AWS::AutoScaling::ScalingPolicy",
			"Condition" : "historicalRoleCreation",
			"Properties" : {
				"AdjustmentType" : "ChangeInCapacity",
				"AutoScalingGroupName" : { "Ref" : "historicalGroup" },
				"Cooldown" : "900",
				"ScalingAdjustment" : "-1"
			}
		}, 

		"historicalhotGroup" : {
			"Type" : "AWS::AutoScaling::AutoScalingGroup",
			"Condition" : "historicalhotRoleCreation",
			"DependsOn" : "kafkaGroup",
			"Properties" : {
				"VPCZoneIdentifier" : [ { "Ref" : "PublicSubnet" } ],
				"LaunchConfigurationName" : { "Ref" : "historicalhotLaunch" },
				"MinSize" : { "Ref" : "MinHistoricalhotInstances" },
				"MaxSize" : "10",
				"NotificationConfiguration" : {
					"TopicARN" : { "Ref" : "SNSNotificationTopic" },
          			"NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
                        					"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                  			"autoscaling:EC2_INSTANCE_TERMINATE",
                                  			"autoscaling:EC2_INSTANCE_TERMINATE_ERROR" ]        			
      			},
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "historicalhot",
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" },
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Name", 
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - historicalhot" ] ] },
					"PropagateAtLaunch" : "true"
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : { "Ref" : "MinHistoricalhotInstances" }, 
					"Timeout" : "PT200M"
				}
			}
		},
		"historicalhotLaunch" : {
			"Type" : "AWS::AutoScaling::LaunchConfiguration",
			"Condition" : "historicalhotRoleCreation",
			"Properties" : {
				"AssociatePublicIpAddress" : "true",
				"ImageId" : { "Ref" : "AMI" },
				"SecurityGroups" : [ { "Ref" : "redBorderPublicSecurityGroup" } ],
				"KeyName"        : { "Ref" : "KeyName" },
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "historicalhot", { "Ref" : "InstanceSize" } ] },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"InstanceMonitoring" : "true", 
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "50",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
						"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
						"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=historical\n",
					"#NODESERVICES=\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n", 
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n", 
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=historicalhotGroup\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n", 
					"S3BUCKET=", { "Ref" : "S3Bucket" }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"S3TYPE=aws\n",
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"cloudwatch\" : \"true\",\n",
					"      \"autoscaled\" : \"true\"\n",
					"     },\n",
					"    \"druid\" : {\n",
					"      \"historical\" : {\n",
					"        \"tier\" : \"hot\"\n",
					"        \"memory_only\" : \"1\"\n",
					"     }\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } }
			}
		},
		"historicalhotLifecycleHook" : {
			"Type" : "AWS::AutoScaling::LifecycleHook",
			"Condition" : "historicalhotRoleCreation",
			"Properties" : {
				"AutoScalingGroupName" : { "Ref" : "historicalhotGroup"  },
				"LifecycleTransition" : "autoscaling:EC2_INSTANCE_TERMINATING",
				"NotificationTargetARN" : { "Fn::GetAtt" : [ "SQSQueue", "Arn" ] },
				"HeartbeatTimeout" : "7200",
				"RoleARN" : { "Fn::GetAtt" : [ "IAMRoleLifecycleHook", "Arn" ] }
			}
		},
		"historicalhotHighCapacityAlarm" : {
			"Type" : "AWS::CloudWatch::Alarm",
			"Condition" : "historicalhotRoleCreation",
			"Properties" : {
				"AlarmName" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " - historicalHotHighCapacityAlarm" ] ] },
				"AlarmDescription" : "Alarm for historical hot autoscaling. When capacity is so high, triggers a scaling out",
				"Namespace" : { "Fn::Join" : [ "", [ "rB/", { "Ref" : "AWS::StackName" } ] ] },
				"MetricName" : "hot_tier_capacity",
				"Dimensions" : [ {
					"Name" : "InstanceId",
					"Value" : "coordinator"
				} ],  
				"EvaluationPeriods" : "1",
				"Period" : "300",
				"ComparisonOperator" : "GreaterThanThreshold",
				"Threshold" : "80",
				"Statistic" : "Average",
				"ActionsEnabled" : "true",
				"AlarmActions" : [ { "Ref" : "historicalhotScaleUpPolicy" } ]
			}
		},
		"historicalhotLowCapacityAlarm" : {
			"Type" : "AWS::CloudWatch::Alarm",
			"Condition" : "historicalhotRoleCreation",
			"Properties" : {
				"AlarmName" : { "Fn::Join" : [ "", [ { "Ref" : "AWS::StackName" }, " - historicalHotLowCapacityAlarm" ] ] },
				"AlarmDescription" : "Alarm for historical hot  autoscaling. When RAM is so low, triggers a scaling in",
				"Namespace" : { "Fn::Join" : [ "", [ "rB/", { "Ref" : "AWS::StackName" } ] ] },
				"MetricName" : "hot_tier_capacity",
				"Dimensions" : [ {
					"Name" : "InstanceId",
					"Value" : "coordinator"
				} ], 
				"EvaluationPeriods" : "3",
				"Period" : "300",
				"ComparisonOperator" : "LessThanThreshold",
				"Threshold" : "30",
				"Statistic" : "Average",
				"ActionsEnabled" : "true",
				"AlarmActions" : [ { "Ref" : "historicalhotScaleDownPolicy" } ]
			}
		},
		"historicalhotScaleUpPolicy" : {
			"Type" : "AWS::AutoScaling::ScalingPolicy",
			"Condition" : "historicalhotRoleCreation",
			"Properties" : {
				"AdjustmentType" : "ChangeInCapacity",
				"AutoScalingGroupName" : { "Ref" : "historicalhotGroup" },
				"Cooldown" : "900",
				"ScalingAdjustment" : "1"
			}
		}, 
		"historicalhotScaleDownPolicy" : {
			"Type" : "AWS::AutoScaling::ScalingPolicy",
			"Condition" : "historicalhotRoleCreation",
			"Properties" : {
				"AdjustmentType" : "ChangeInCapacity",
				"AutoScalingGroupName" : { "Ref" : "historicalhotGroup" },
				"Cooldown" : "900",
				"ScalingAdjustment" : "-1"
			}
		}, 

		"historicalGenericGroup" : {
			"Type" : "AWS::AutoScaling::AutoScalingGroup",
			"Condition" : "historicalGenericRoleCreation",
			"DependsOn" : "kafkaGroup",
			"Properties" : {
				"VPCZoneIdentifier" : [ { "Ref" : "PublicSubnet" } ],
				"LaunchConfigurationName" : { "Ref" : "historicalGenericLaunch" },
				"MinSize" : { "Ref" : "HistoricalGenericInstances" },
				"MaxSize" : "10",
				"NotificationConfiguration" : {
					"TopicARN" : { "Ref" : "SNSNotificationTopic" },
          			"NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
                        					"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                  			"autoscaling:EC2_INSTANCE_TERMINATE",
                                  			"autoscaling:EC2_INSTANCE_TERMINATE_ERROR" ]        			
      			},
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "historicalGeneric",
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" },
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Name", 
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - historicalGeneric" ] ] },
					"PropagateAtLaunch" : "true"
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : { "Ref" : "HistoricalGenericInstances" }, 
					"Timeout" : "PT200M"
				}
			}
		},
		"historicalGenericLaunch" : {
			"Type" : "AWS::AutoScaling::LaunchConfiguration",
			"Condition" : "historicalGenericRoleCreation",
			"Properties" : {
				"AssociatePublicIpAddress" : "true",
				"ImageId" : { "Ref" : "AMI" },
				"SecurityGroups" : [ { "Ref" : "redBorderPublicSecurityGroup" } ],
				"KeyName"        : { "Ref" : "KeyName" },
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "historicalGeneric", { "Ref" : "InstanceSize" } ] },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"InstanceMonitoring" : "true", 
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "500",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
						"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
						"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=historical\n",
					"#NODESERVICES=\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n", 
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n", 
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=historicalGenericGroup\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n", 
					"S3BUCKET=", { "Ref" : "S3Bucket" }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"S3TYPE=aws\n",
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"cloudwatch\" : \"true\",\n",
					"      \"autoscaled\" : \"true\"\n",
					"     },\n",
					"    \"druid\" : {\n",
					"      \"historical\" : {\n",
					"        \"tier\" : \"generic\"\n",
					"     }\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } }
			}
		},

		"samzaGroup" : {
			"Type" : "AWS::AutoScaling::AutoScalingGroup",
			"Condition" : "samzaRoleCreation",
			"DependsOn" : "kafkaGroup",
			"Properties" : {
				"VPCZoneIdentifier" : [ { "Ref" : "PublicSubnet" } ],
				"LaunchConfigurationName" : { "Ref" : "samzaLaunch" },
				"MinSize" : { "Ref" : "MinSamzaInstances" },
				"MaxSize" : "10",
				"NotificationConfiguration" : {
					"TopicARN" : { "Ref" : "SNSNotificationTopic" },
          			"NotificationTypes" : [ "autoscaling:EC2_INSTANCE_LAUNCH",
                        					"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
                                  			"autoscaling:EC2_INSTANCE_TERMINATE",
                                  			"autoscaling:EC2_INSTANCE_TERMINATE_ERROR" ]        			
      			},
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "samza",
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" },
					"PropagateAtLaunch" : "true"
				},{
					"Key" : "Name", 
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - samza" ] ] },
					"PropagateAtLaunch" : "true"
				} ]
			},
			"CreationPolicy" : {
				"ResourceSignal" : {
					"Count" : { "Ref" : "MinSamzaInstances" }, 
					"Timeout" : "PT200M"
				}
			}
		},
		"samzaLaunch" : {
			"Type" : "AWS::AutoScaling::LaunchConfiguration",
			"Condition" : "samzaRoleCreation",
			"Properties" : {
				"AssociatePublicIpAddress" : "true",
				"ImageId" : { "Ref" : "AMI" },
				"SecurityGroups" : [ { "Ref" : "redBorderPublicSecurityGroup" } ],
				"KeyName"        : { "Ref" : "KeyName" },
				"InstanceType" : { "Fn::FindInMap" : [ "InstanceTypeMap", "samza", { "Ref" : "InstanceSize" } ] },
				"IamInstanceProfile" : { "Ref" : "IAMInstanceProfile" },
				"InstanceMonitoring" : "true", 
				"BlockDeviceMappings" : [ {
					"DeviceName" : "/dev/sda1",
					"Ebs" : {
						"VolumeSize" : "50",
						"VolumeType" : "gp2",
						"DeleteOnTermination" : "true"
					}
				},  {
					"DeviceName" : "/dev/sdb",
						"VirtualName" : "ephemeral0"
				},  {
					"DeviceName" : "/dev/sdc",
						"VirtualName" : "ephemeral1"
				} ],
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"#!/bin/bash\n",
					"NODEROLE=samza\n",
					"NODESERVICES=\n",
					"CDOMAIN=", { "Ref" : "CDOMAIN" }, "\n",
					"PUBLIC_HOSTEDZONE_ID=", { "Ref" : "PublicHostedZone" }, "\n", 
					"PRIVATE_HOSTEDZONE_ID=", { "Ref" : "PrivateHostedZone" }, "\n", 
					"REGION=", { "Ref" : "AWS::Region" }, "\n",
					"VPCID=", { "Ref" : "VPC" }, "\n",
					"PRIVATE_SECURITY_GROUP=", { "Ref" : "redBorderPrivateSecurityGroup" }, "\n",
					"STACKNAME=", { "Ref" : "AWS::StackName" }, "\n",
					"AUTOSCALINGGROUPNAME=samzaGroup\n",
					"SUBNET_ID=", { "Ref" : "PrivateSubnet" }, "\n", 
					"S3BUCKET=", { "Ref" : "S3Bucket" }, " \n",
					{ "Fn::If" : [ "regionNVirginia",
						"S3HOST=s3.amazonaws.com\n",
						{ "Fn::Join" : [ "" , [ "S3HOST=s3-", { "Ref" : "AWS::Region" }, ".amazonaws.com\n" ] ] }
					] },
					"AWS_ACCESS_KEY=\"", { "Ref" : "IAMAccessKey" }, "\"\n",
					"AWS_SECRET_KEY=\"", { "Fn::GetAtt" : [ "IAMAccessKey", "SecretAccessKey" ] }, "\"\n",
					"\n\n",
					"cat > /opt/rb/etc/chef/initialdata.json <<- _RBEOF2_\n",
					"{\n",
					"  \"redBorder\" : {\n",
					"    \"aws\" : {\n",
					"      \"cloudwatch\" : \"true\"\n",
					"    }\n",
					"  }\n",
					"}\n",
					"_RBEOF2_\n",
					". /opt/rb/bin/rb_set_aws_interface.sh",
					"\n"
				] ] } }
			}
		},
		"openVPNInstance" : {
			"Type" : "AWS::EC2::Instance",
			"Condition" : "openVPNInstanceCreation",
			"Properties" : {
				"AvailabilityZone" : { "Fn::GetAtt" : [ "PublicSubnet", "AvailabilityZone" ] },
				"ImageId" : { "Ref" : "AMIOpenVPN" },
				"InstanceType" : "t2.micro",
				"KeyName" : { "Ref" : "KeyName" },
				"NetworkInterfaces": [ {
			      	"AssociatePublicIpAddress": "true",
			      	"DeviceIndex": "0",
			      	"GroupSet": [ { "Ref" : "openVPNSecurityGroup" } ],
			      	"SubnetId": { "Ref" : "PublicSubnet" }
			    } ],				
				"SourceDestCheck" : "false",
				"UserData" : { "Fn::Base64" : { "Fn::Join" : ["", [
					"public_hostname=", { "Fn::Join" : [ "", [ "openvpn.", { "Ref" : "CDOMAIN" } ] ] }, "\n",
					"admin_user=redborder\n",
					"admin_pw=", { "Ref" : "openVPNAdminPasswd" }, "\n",
					"reroute_dns=1\n"
				] ] } },
				"Tags" : [ {
					"Key" : "Role",
					"Value" : "openvpn"					
				},{
					"Key" : "Cluster",
					"Value" : { "Ref" : "AWS::StackName" }					
				},{
					"Key" : "Name", 
					"Value" : { "Fn::Join" : [ "", [
						{ "Ref" : "AWS::StackName" }, " - openvpn" ] ] }
				} ]
			}
		}, 
		"privateInterfaceOpenVPN" : {
 			"Type" : "AWS::EC2::NetworkInterface",
			"Condition" : "openVPNInstanceCreation", 
			"Properties" : {
				"SubnetId" : { "Ref" : "PrivateSubnet" },
				"GroupSet" : [ { "Ref" : "redBorderPrivateSecurityGroup" } ]
			}
		}, 
		"privateInterfaceAttachmentOpenVPN" : {
			"Type": "AWS::EC2::NetworkInterfaceAttachment",
			"Condition" : "openVPNInstanceCreation", 
			"Properties" : {
				"DeleteOnTermination" : "true", 
				"DeviceIndex" : "1",
				"InstanceId" : { "Ref" : "openVPNInstance" },
				"NetworkInterfaceId" : { "Ref" : "privateInterfaceOpenVPN" }
			}
		}
	}
}
